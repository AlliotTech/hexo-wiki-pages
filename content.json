{"pages":[{"title":"About","date":"2019-07-31T16:00:00.000Z","path":"about/index.html","text":""},{"title":"Categories","date":"2020-03-24T12:50:56.372Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2020-03-24T12:50:56.372Z","path":"tags/index.html","text":""}],"posts":[{"title":"root用户被锁","date":"2019-08-27T09:36:00.000Z","path":"运维/Linux/问题处理/root用户被锁/","text":"提示 Account locked due to 100 failed logins，无法登陆。这是由于设置了 pam 认证机制，在错误次数超过所设值的时候锁定了账户，由于是 root 被锁，我们只能通过登陆普通用户，su - 切换到 root 用户，重置用户错误次数计数来解锁：1pam_tally2 --user root --reset","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"问题处理","slug":"运维/Linux/问题处理","permalink":"https://wiki.iots.vip/categories/运维/Linux/问题处理/"}]},{"title":"硬件信息查看","date":"2019-08-27T09:36:00.000Z","path":"运维/Linux/问题处理/硬件信息查看/","text":"CPU1234567891011121314151617# 查看 CPU 信息（型号） cat /proc/cpuinfo | grep name # 查看物理 CPU 个数 cat /proc/cpuinfo| grep \"physical id\"| sort| uniq| wc -l # 查看每个物理 CPU 中 core 的个数(即核数) 总物理核数 = 物理 CPU 个数 乘以 core cat /proc/cpuinfo| grep \"cpu cores\"| uniq # 加 uniq 原因是，每个逻辑 CPU 都会显示一次 cores# 查看逻辑 CPU 的个数，如果开了超线程的话，是核数 * 2 cat /proc/cpuinfo| grep \"processor\"| wc -l# 查看CPU的相关信息 lscpu# CPU 运行模式（64位 X86）getconf LONG_BIT 内存1234567891011121314free -G dmidecode -t memory # 不一定准确# 最大支持内存大小 dmidecode|grep -P 'Maximum\\s+Capacity'# 内存的插槽数,已经使用多少插槽.每条内存多大dmidecode | grep -A5 \"Memory Device\"| grep Size | grep -v Range# 内存频率 dmidecode|grep -A16 \"Memory Device\"|grep 'Speed'# 查看内存的详细信息 cat /proc/meminfo |head -20 硬盘服务器一般都做了 RAID，直接进入 RAID 管理看。fdisk -l 看的不一定准确 12# 硬盘检测（可查看硬盘 SN）smartctl -a /dev/sda PCI1lspci | head -10 网卡12345678910# 查看所有网卡lspci | grep -i 'eth'# 定位到设备名对应的网口 lspci |grep -i eth* # 查找 PCI 网卡设备 find /sys -name ethethtool -p &lt;设备名&gt; # 对应设备的网口会闪定位灯# 查看所有网卡链路状态 for i in `seq 0 9`;do ethtool eth$&#123;i&#125; | egrep 'eth|Link';done 判断是不是虚拟机123dmidecode -t 1dmesg | grep -i virtual # 查看是否有 virtual","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"问题处理","slug":"运维/Linux/问题处理","permalink":"https://wiki.iots.vip/categories/运维/Linux/问题处理/"}]},{"title":"终端乱码","date":"2019-08-27T09:36:00.000Z","path":"运维/Linux/问题处理/终端乱码/","text":"临时方式1export LANG=\"en\"","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"问题处理","slug":"运维/Linux/问题处理","permalink":"https://wiki.iots.vip/categories/运维/Linux/问题处理/"}]},{"title":"chrony时间同步","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用服务/chrony/","text":"安装1234yum install chrony -ysystemctl enable --now chronyd # 启动服务并设置开机启动 firewall-cmd --add-service=ntp --permanent firewall-cmd --reload # 因NTP使用123/UDP端口协议，所以允许NTP服务即可 配置文件1vi /etc/chrony.conf 各字段：123456789101112131415161718192021222324252627282930313233343536373839404142434445# 使用pool.ntp.org项目中的公共服务器。以server开，理论上你想添加多少时间服务器都可以。# Please consider joining the pool (http://www.pool.ntp.org/join.html).#server 0.centos.pool.ntp.org iburst#server 2.centos.pool.ntp.org iburst#server 3.centos.pool.ntp.org iburstserver 192.168.170.8 iburst # 根据实际时间计算出服务器增减时间的比率，然后记录到一个文件中，在系统重启后为系统做出最佳时间补偿调整。driftfile /var/lib/chrony/drift # chronyd根据需求减慢或加速时间调整，# 在某些情况下系统时钟可能漂移过快，导致时间调整用时过长。# 该指令强制chronyd调整时期，大于某个阀值时步进调整系统时钟。# 只有在因chronyd启动时间超过指定的限制时（可使用负值来禁用限制）没有更多时钟更新时才生效。makestep 1.0 3 # 将启用一个内核模式，在该模式中，系统时间每11分钟会拷贝到实时时钟（RTC）。rtcsync # Enable hardware timestamping on all interfaces that support it.# 通过使用hwtimestamp指令启用硬件时间戳#hwtimestamp eth0#hwtimestamp eth1#hwtimestamp * # Increase the minimum number of selectable sources required to adjust# the system clock.#minsources 2 # 指定一台主机、子网，或者网络以允许或拒绝NTP连接到扮演时钟服务器的机器#allow 192.168.0.0/16#deny 192.168/16allow 192.168.0.0/16 允许该网段客户端来同步时间 # Serve time even if not synchronized to a time source.local stratum 10 # 指定包含NTP验证密钥的文件。#keyfile /etc/chrony.keys # 指定日志文件的目录。logdir /var/log/chrony # Select which information is logged.#log measurements statistics tracking 修改完配置需要重启 chronyd 服务生效。 同步使用 ntpdate 来测试，测试前需要安装 ntp：1yum install ntp 执行：1ntpdate 192.168.170.8 # 从该 IP 同步时间 其他命令12345678910timedatectl # 查看当前系统时区 timedatectl list-timezones # 查看所有可用的时区timedatectl list-timezones | grep -E \"Asia/S.*\" # 筛选式查看在亚洲S开的上海可用时区 timedatectl set-timezone Asia/Shanghai # 设置当前系统为Asia/Shanghai上海时区 chronyc -a makestep # 设置完时区后，强制同步下系统时钟chronyc sources -v # 查看时间同步源 chronyc sourcestats -v # 查看时间同步源状态 timedatectl set-local-rtc 1 # 设置硬件时间（硬件时间默认为 UTC） timedatectl set-ntp yes # 启用NTP时间同步 chronyc tracking # 校准时间服务器","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用服务","slug":"运维/Linux/常用服务","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用服务/"}]},{"title":"常用链接","date":"2019-07-31T16:00:00.000Z","path":"工具与效率/常用链接/","text":"阿里巴巴开源镜像站文档: https://opsx.alibaba.com/guide?lang=zh-CN GitHub 使用技巧: https://zhuanlan.zhihu.com/p/61172248 GitHub readme.md 美化: https://shields.io/ https://github.com/phodal/brand 快捷键大全: http://mykeys.sinaapp.com/index.php","tags":[],"categories":[{"name":"工具与效率","slug":"工具与效率","permalink":"https://wiki.iots.vip/categories/工具与效率/"}]},{"title":"科学上网","date":"2019-07-31T16:00:00.000Z","path":"工具与效率/科学上网/","text":"shadowsocks部署见 Centos一键搭建SS与多用户配置 客户端Windows：Android:iOS: v2rayN部署安装 v2ray 管理面板 sprov-ui:1wget -O /usr/bin/sprov-ui -N --no-check-certificate https://raw.githubusercontent.com/seedc/sprov-ui/master/install.sh &amp;&amp; chmod +x /usr/bin/sprov-ui &amp;&amp; sprov-ui 安装 bbr:1wget --no-check-certificate https://github.com/yuyeah/sprov-ui/raw/master/bbr.sh &amp;&amp; bash bbr.sh 完成后重启。 关闭防火墙:1systemctl stop firewalld 客户端V2RayN（Windows）： Githubv2rayW（Windows）： Githubv2rayX（macOS）： GithubV2RayU（macOS）： GithubShadowrocket（iOS）： iTunesi2Ray（iOS）： iTunesQuantumult（iOS）： iTunesBifrostV（Android）： Google play ApkPureV2RayNG（Android）： Google play Github wireguard部署客户端Windows： TunSafeAndroid:iOS:","tags":[],"categories":[{"name":"工具与效率","slug":"工具与效率","permalink":"https://wiki.iots.vip/categories/工具与效率/"}]},{"title":"Markdown","date":"2019-07-31T16:00:00.000Z","path":"语法/Markdown/","text":"文字加粗1**这是加粗的文字** 斜体1*这是斜体文字*","tags":[],"categories":[{"name":"语法","slug":"语法","permalink":"https://wiki.iots.vip/categories/语法/"}]},{"title":"常用代码片段","date":"2019-07-31T16:00:00.000Z","path":"开发/Python/常用代码片段/","text":"模拟POST请求12345678910111213141516171819202122232425262728import requests# 忽略 requests 请求认证警告(由于这里是https请求，直接发送请求会报错误:SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590))requests.packages.urllib3.disable_warnings() url = 'www.iots.vip' # header 为字典格式 headersValue = &#123; 'Cookie': 'SESSION=xx; Path=/; HttpOnly', 'user-agent': 'IRENSHI_APP_AGENT', 'Content-Type': 'application/json; charset=utf-8', 'Host': 'www.iots.vip', 'Connection': 'Keep-Alive', 'Accept-Encoding': 'gzip',&#125;# json 的 body jsonValue = &#123; \"deviceToken\": \" \", \"deviceType\": \"NORMAL\", \"latitude\": XXX, \"locationName\": \"XXX\",&#125;# 如果 body 为 json 数据，可以直接使用 json = 指定 r = requests.post(url, json=jsonValue, headers=headersValue, verify=False)# 如果结果是 json 格式，可以直接使用 r.json 返回 json数据print r.json() JSON转字典123import json jsonValue = '&#123;\"result\":true,\"errorCode\":null,\"errorMessage\":null,\"data\":xxxx&#125;' dict1 = json.loads(jsonValue) urlencode12345678910111213141516from urllib import parse #如果是字典形式 dictValue = &#123;'key': '华而不实，为所欲为'&#125;# urlencode 对字典或由两元素元组组成的列表进行码编码，将其转换为符合url规范的查询字符串 print(parse.urlencode(dictValue))# quote 对非ASCII编码的字符进行编码，默认进行UTF-8编码，不对“/”进行编码，一般对请求url路径中非ASCII编码的字符(string)进行编码 strValue = \"华而不实，为所欲为\" a = parse.quote(strValue)print(a)# 解码print(parse.unquote(a))","tags":[],"categories":[{"name":"开发","slug":"开发","permalink":"https://wiki.iots.vip/categories/开发/"},{"name":"Python","slug":"开发/Python","permalink":"https://wiki.iots.vip/categories/开发/Python/"}]},{"title":"常用函数","date":"2019-07-31T16:00:00.000Z","path":"开发/Python/常用函数/","text":"数字数学函数1234567891011121314abs(x) # 返回数字的绝对值，如abs(-10) 返回 10 ceil(x) # 返回数字的上入整数，如math.ceil(4.1) 返回 5 cmp(x, y) # 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换。 exp(x) # 返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045 fabs(x) # 返回数字的绝对值，如math.fabs(-10) 返回10.0 floor(x) # 返回数字的下舍整数，如math.floor(4.9)返回 4 log(x) # 如math.log(math.e)返回1.0,math.log(100,10)返回2.0 log10(x) # 返回以10为基数的x的对数，如math.log10(100)返回 2.0 max(x1, x2,...) # 返回给定参数的最大值，参数可以为序列。 min(x1, x2,...) # 返回给定参数的最小值，参数可以为序列。 modf(x) # 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。pow(x, y) # x**y 运算后的值。 round(x [,n]) # 返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。 sqrt(x) # 返回数字x的平方根。 随机数随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。Python包含以下常用随机数函数：123456choice(seq) # 从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。 randrange ([start,] stop [,step]) # 从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1 random() # 随机生成下一个实数，它在[0,1)范围内。 seed([x]) # 改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。 shuffle(lst) # 将序列的所有元素随机排序 uniform(x, y) # 随机生成下一个实数，它在[x,y]范围内。 三角函数12345678910acos(x) # 返回x的反余弦弧度值。 asin(x) # 返回x的反正弦弧度值。 atan(x) # 返回x的反正切弧度值。 atan2(y, x) # 返回给定的 X 及 Y 坐标值的反正切值。 cos(x) # 返回x的弧度的余弦值。 hypot(x, y) # 返回欧几里德范数 sqrt(x*x + y*y)。 sin(x) # 返回的x弧度的正弦值。 tan(x) # 返回x弧度的正切值。 degrees(x) # 将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0 radians(x) # 将角度转换为弧度 数学常量12pi # 数学常量 pi（圆周率，一般以π来表示） e # 数学常量 e，e即自然常数（自然常数）。 参考链接菜鸟教程 Python3： https://www.runoob.com/python3/python3-number.html","tags":[],"categories":[{"name":"开发","slug":"开发","permalink":"https://wiki.iots.vip/categories/开发/"},{"name":"Python","slug":"开发/Python","permalink":"https://wiki.iots.vip/categories/开发/Python/"}]},{"title":"控制台部分用法（草稿）","date":"2019-07-31T16:00:00.000Z","path":"开发/Python/控制台部分用法/","text":"123del a # 删除变量 a reset # 删除所有控制台中的变量 clear # 同 shell 中的清屏","tags":[],"categories":[{"name":"开发","slug":"开发","permalink":"https://wiki.iots.vip/categories/开发/"},{"name":"Python","slug":"开发/Python","permalink":"https://wiki.iots.vip/categories/开发/Python/"}]},{"title":"Python环境搭建","date":"2019-07-31T16:00:00.000Z","path":"开发/Python/环境搭建/","text":"运行环境CentOS方法一从 EPEL 仓库安装：1234567yum install epel-release yum list |grep python3yum install python36yum -y install python-pipyum install -y python34-setuptools easy_install-3.4 pippip install --upgrade pip","tags":[],"categories":[{"name":"开发","slug":"开发","permalink":"https://wiki.iots.vip/categories/开发/"},{"name":"Python","slug":"开发/Python","permalink":"https://wiki.iots.vip/categories/开发/Python/"}]},{"title":"常用运行","date":"2019-07-31T16:00:00.000Z","path":"运维/Windows/常用运行/","text":"DirectX诊断工具:运行 - dxdiag 远程桌面运行 - mstsc","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Windows","slug":"运维/Windows","permalink":"https://wiki.iots.vip/categories/运维/Windows/"}]},{"title":"注册表与服务管理","date":"2019-07-31T16:00:00.000Z","path":"运维/Windows/注册表与服务管理/","text":"注册表如何删除无用的服务项：运行- regedit 定位到 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ 删除对应服务名条目即可。","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Windows","slug":"运维/Windows","permalink":"https://wiki.iots.vip/categories/运维/Windows/"}]},{"title":"Nginx","date":"2019-07-31T16:00:00.000Z","path":"运维/中间件/Nginx/","text":"通过IP访问服务器则跳转到百度修改配置文件，添加一个 server 如下:12345server &#123; listen 80 default; server_name _; rewrite ^ http://www.baidu.com$request_uri?;&#125;","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"中间件","slug":"运维/中间件","permalink":"https://wiki.iots.vip/categories/运维/中间件/"}]},{"title":"SAN网络","date":"2019-07-31T16:00:00.000Z","path":"运维/存储/SAN网络/","text":"概念 SAN（Storage Area Network），用于主机、存储、带库等之间的互联，走存储 IO。 FCID WWN（World Wide Name），存储技术中的唯一标识符。 常用命令Linux 服务器查看 HBA 卡信息12cat /sys/class/fc_host/hostX/port_name # wwn 字段 cat /sys/class/fc_host/hostX/port_stat # 端口状态（online/offline） SAN 交换机查看接口状态:1switchshow 查看光衰：123# 先通过 switchshow 找到对应端口 id sfpshow id # RX Power 在 [-2, -7] 为质量较好；[-7, -10] 质量暂时可以接受；[-10, -14] 不可接受，需要整改；[-14,- 49] 为不能通讯。 案例案例:SAN存储区域网络配置练习|Alliot’s blog","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"存储","slug":"运维/存储","permalink":"https://wiki.iots.vip/categories/运维/存储/"}]},{"title":"porterrshow","date":"2019-07-31T16:00:00.000Z","path":"运维/存储/porterrshow/","text":"介绍 brocade 交换机的端口状态异常，通常通过 porterrshow 的输出结果初步排查。需要注意的是， porterrshow 的计数器为日积月累下的数据，大量的历史累积值对故障的排查是没有太大帮助的，在故障发生后，可记录当前的值，清零计数器后再看新值，所得输出结果才是有效的。 输出内容123456789101112131415161718192021222324252627282930313233frames tx/rx: tx代表端口发送的数据帧，rx代表端口收到的数据帧。这两个值反映了通过该端口的数据流量，通常可用来粗略判断哪些端口为使用中，哪些端口为闲置状态。enc_in: 8bit/10bit数据帧帧内的编码错误。数据的损坏会造成该值增长，因此该项指标用于标记数据帧内的编码错误。有时相连末端设备重置/重启也会造成该值增长。 crc_err: 数据帧 CRC 校验错误。数据帧在Payload之后，在EOF (end of frame)之前会添加一个可用于接收端口校验所接收数据是否损坏的校验码。若数据帧损坏，接收端会发现该值不一致，继而该报错值增长。crc_g_eof: 数据帧 CRC 校验错误，且数据帧 EOF是好的。当数据帧首次被交换机检测到CRC错误时，交换机在转发该帧时，会把EOF置为bad(EOFni)；所以后续接收该帧的交换机的端口上，只会有crc_err增长，而crc_g_eof的值保持不变，这样就能很直观的找到产生CRC错误的源头。too_long: 通常FC数据帧最大为 2148 字节。若EOF损坏或数据帧生成不正确，则该值随之增长。too_short: 如果在SOF (start of frame) 和EOF间的长度小于28(24 Header+ 4 CRC)个字节，则该值随之增长。数据发送方故障和链路的不稳定均可能造成该计数器的增长。bad_eof: 数据帧 EOF 报错。enc_out: 8bit/10bit 数据帧帧外编码错误造成的错误值累积，通常反映了线缆质量问题，或末端设备异常。此外，由于末端设备的重启带来的端口上下线也可能会引起enc_out的增长。disc c3: Class 3数据帧被交换机丢弃。若目标地址不可达或者源端口还没有登录到交换机，以及由于拥塞产生超时丢帧(timeout discards)后，该值均会增长。这个参数仅仅代表有丢包发生，但不能说是这个端口本身存在故障。在Brocade Fabric OS微码版本v6.3.1之前，c3 timeout discards值是不分方向的，v6.3.1之后被分为er_rx_c3_timeout和er_tx_c3_timeout两项，rx表示接收数据，tx表示发送数据。当端口发送或者接收帧之后，会消耗掉相应的方向上的缓存，Buffer-to-Buffer credit值减少。如果超过500毫秒（默认情况下，依配置不同可能会有改变）credit值始终为0，则认为后续分发动作无法完成，丢弃尚在缓存中的帧，计数器值增加。有大量er_tx_c3_timeout数值累积的F_Port通常为性能问题的故障点，也就是我们常说的瓶颈设备。关于瓶颈设备的检查，请参照之前的Blog“如何在博科交换机的SAN环境中排查瓶颈设备（Slow Drain Device）？”：https://community.emc.com/community/support/chinese/storagehw/bloglink fail: 当交换机端口在 LR (Link Reset)接收状态的时间超过 R_A_TOV值时，该错误计数器增长。Link Reset的超时通常会导致Link Failure，且该状态通常说明端口loss of signal 或loss of sync的时长大于R_A_TOV。loss sync: bit 或者 transmission-word无法被准确区分确认时会引起信号同步失败。末端设备的重启，光纤线的拔插，或交换机端口的上下线均可能带来该问题。loss sig: 接收方没有成功收到信号。与loss sync类似，末端设备的重启，光纤线的拔插，或交换机端口的上下线都有可能信号的丢失。link fail, loss sync, loss sig这三个报错在链路初始化的过程中都会产生。而当链路不稳定时，这些错误计数值通常也会随之增长。 frjt: class 2数据帧无法处理时会返回F_RJT报错。fbsy: class 2数据帧无法在E_D_TOV时间内处理时会被丢弃并返回F_BSY报错。frjt和fbsy用于 class 2。通常说来，FC SAN多用class 3数据帧，因此这两类错误较少见，一般多出现在FICON环境中。 参考链接https://www.cnblogs.com/hongzhuaxueni/p/5254762.html","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"存储","slug":"运维/存储","permalink":"https://wiki.iots.vip/categories/运维/存储/"}]},{"title":"博科（Brocade）光纤交换机命令","date":"2019-07-31T16:00:00.000Z","path":"运维/存储/博科(Brocade)光纤交换机命令/","text":"常用命令：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455uptime # 显示交换机工作时间ipaddrshow # 显示交换机 IP 地址信息licenseshow # 显示当前交换机所添加的 license 信息switchshow # 检查交换机信息及端口状态switchstatusshow # 显示交换机的运行状态firmwareshow # 显示微码版本fanshow # 显示风扇运行状态tempshow # 显示交换机当前温度信息psshow # 显示电源运行状态slotshow # 显示板卡运行状态hashshow # 显示 CP 版卡 HA 状态,errdump # 显示错误日志fabricshow # 显示 fabric 信息及级联信息cfgshow # 显示交换机配置信息porterrshow # 显示交换机端口的错误统计chassisshow # 显示外壳信息及序列号version # 相看版本userconfig --show -a # 查看登录帐号domainsshow # 查看交换机的 domain 信息aliashow # 查看别名chassisshow # 显示 chassis 和 WWN 卡的状态historyshow/historylastshow # 显示历史日志消息# 级联互 ping: fcping --number 10000 --length 2036 --interval 1 10:00:00:05:33:9f:06:28级联更改: portcfglongdistance 0# 备份: configuplocadProtocol (scp or ftp):ftphost:user name:filename:password:# 恢复: switchdisable # 停用交换机configdownloadProtocol (scp or ftp):ftpServer Name or IP Address [host]:User Name [user]: File Name [config.txt]:config.txt.........Do you want to continue [y/n]:yPassword:# 设置 IP:ipaddrsetEthernet IP Address [10.77.77.77]:Ethernet Subnetmask [255.255.255.0]:Fibre Channel IP Address [none]:Fibre Channel Subnetmask [none]:Gataway IP Address []:DHCP [On] Zone 配置示例：1234567891011121314151617181920212223242526272829303132333435363738# 创建别名: alicreate &quot;member1&quot;,&quot;1,1;1,2;1,3&quot;alicreate &quot;member2&quot;,&quot;1,2;1,3;1,4&quot;alicreate &quot;member3&quot;,&quot;1,3;1,4;1,5&quot;alishowcfgsave# 新建 zone 并添加端口: zonecreate &quot;zone1&quot;,&quot;member1;member2&quot;zonecreate &quot;zone2&quot;,&quot;1,1;1,7&quot;zonecreate &quot;zone2&quot;,&quot;member3;1,8&quot;zoneshowcfgsave# 添加 zone: zoneadd &quot;zone1&quot; &quot;test1; test2&quot; # 新建配置并添加 zone:cfgcreate &quot;conf1&quot;,&quot;zone1;zone2;zone3&quot;cfgshowcfgsave# 添加 zone 至配置: cfgadd &quot;conf1&quot;, &quot;zone4; zone5; zone6&quot;cfgsavecfgshow# 启用配置: cfgenable conf1# 存储配置: cfgsave# alias 别名alicreate &quot;port01&quot;,&quot;0,1&quot;# 删除 cfg: IBM_2005_H16:admin&gt; cfgremove &quot;H16_cfg&quot;,&quot;vmtest&quot;IBM_2005_H16:admin&gt; cfgsaveIBM_2005_H16:admin&gt; cfgenable H16_cfg删除 zone: IBM_2005_H16:admin&gt; zonedelete vmtest删除 alias: .....","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"存储","slug":"运维/存储","permalink":"https://wiki.iots.vip/categories/运维/存储/"}]},{"title":"shell脚本加密","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/shell脚本加密/","text":"第一种，gzexe1gzexe 1.sh 解密：1gzexe -d 1.sh 第二种,shc1shc -T -f 1.sh -f 后跟要加密的文件名，-T 这个参数必须要加但是 shc 有个问题，就是加密后的脚本执行非常慢，似乎有一个两秒左右的解压缩时间， 第三种,upxupx 是一个加壳工具，主要用来给可执行文件加密用的，安装过程省略。加密：1234# 最快压缩upx -1 1.sh# 最强压缩upx -9 1.sh upx 不能压缩太小文件，而脚本众所周知一般都不大，upx 对 shell 脚本价值减少 90%。","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"}]},{"title":"AIX划盘","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/存储/AIX划盘/","text":"调研信息123456lspv # 相当于 Linux 下的 pvs lsvg # 相当于 Linux 下的 vgs df -g # 相当于 Linux 下的 df -h ，其中 -g 表示 以 gb 为单位显示，也可以 -t 以 tb 为单位 或 -m 以 mb 为单位显示 lsdev -Cc disk # 列出系统所有磁盘，包括子盘，类似于 Linux 下的 lsblk powermt display device=all # 列出 EMC 的所有盘 powermt display device=all | grep hdiskpower 查看 wwn:1234lscfg -vpl fcs* | grep Net # 或 lscfg -vpl fcs0 | grep Net lscfg -vpl fcs1 | grep Net 扫盘：1cfgmgr # 相当于 Linux 下的 echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan 改 reserver_policy 为 no_reserve12lsattr -El 盘名 # 检查 attr，如 lsattr -El hdiskpower196 chdev -l hdiskpower196 -a reserve_policy=no_reserve -P # 修改 attr，其中 -P 为 permanent 表示永久生效","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"存储","slug":"运维/Linux/存储","permalink":"https://wiki.iots.vip/categories/运维/Linux/存储/"}]},{"title":"LVM","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/存储/LVM/","text":"基本概念 简单来说 PV 是物理的磁盘分区，LVM 中的物理的磁盘分区（PV），必须加入 VG，而从 VG 中划分的逻辑分区就被称为 LV。 物理存储介质 The physical media，这里指系统的存储设备：硬盘，如：/dev/hda1、/dev/sda 等等，是存储系统最低层的存储单元。 物理卷 PV(Physical Volume)： 物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。 卷组 VG(Volume Group)：LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。 逻辑卷 LV(Logical Volume)：LVM 的逻辑卷类似于非 LVM 系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。 PE Physical Extent：每一个物理卷被划分为称为 PE 的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。 LE Logical Extents，逻辑卷也被划分为被称为 LE 的可被寻址的基本单位。在同一个卷组中，LE 的大小和 PE 是相同的，并且一一对应。 案例新加磁盘创建PV1lsblk # 显示块设备 格式化磁盘为 LVM 类型（如果不需要分区，则可跳过这步）：12fdisk /dev/sda # 输入 n 选择类型为 8e(LVM) 类型 创建 PV：12pvcreate /dev/sda(10,11) # 创建 sda10 和 sda11 PV pvscan # 扫描物理卷 创建VG创建名为 vg_name 的 VG 并将 sdb、sdc、sdd 三个 PV 加入到该 VG 中：1vgcreate vg_name /dev/sdb /dev/sdc /dev/sdd 拓展VG将 PV sdb 加入到 vg_name 中：1vgextend vg_name /dev/sdb 缩减VG需求： 将 pv(/dev/sda10) 从 vg1 移除，以缩减 vg1 大小实现：缩减 VG 是比较危险的操作 ，应注意以下几点： 确保缩减后的空间大小依然能储存原有的所有数据; 先将数据移动到其他 PV 后(pvmove)才能进行缩减 PV（pvreduce）操作。 123456pvs # 查看 pv 信息 pvmove /dev/sda10 # 将 /dev/sda10 的数据移动到其他 PV 中去 vgreduce vg1 /dev/sda10 # 将 PV 从对应的 VG 中移除 pvs # 查看是否从 VG 成功移除该 PV pvremove /dev/sda10 # 删除 PVvgscan # 扫描VG 创建LV需求： 从 vg1 中创建一个大小为50G，名为 lv1 的 LV，并挂载到 /lv1实现：123456vgs # 查看空间是否足够创建 50G 的 LV lvcreate -L 50G(大小) -n lv1(LV名) vg1(VG名) # 从 vg1 中创建大小为 50G 的 lv1 lvchange -ay /dev/lv_name # 激活 lv (可选操作 也可不做此操作 不影响)mkfs.ext4 /dev/vg1/lv1 # 格式化 lv1 为 ext4 格式mkfs.xfs /dev/vg1/lv1 # 格式化 lv1 为 xfs 格式mount /dev/vg1/lv1 /lv1(挂载点) # 挂载到 /lv1 目录，这里注意： 实际设备文件在 /dev/mapper/vg1-lv1 修改 /etc/fstab 追加一行：1/dev/mapper/vg1-lv1 /lv1 ext4 defaults 0 0 并 mount -a 自动挂载测试一下。 创建LV将 vg_name 中所有容量给 lv_name：1lvcreate -l +100%FREE -n lv_name vg_name 扩展LV需求： 将 /home（挂载的 LV 为 /dev/mapper/centos-var）扩容 5G.实现：12345678df -h # 查看文件系统对应的 LV 这里确认到 /home 挂载点的 LV 为 /dev/mapper/centos-var vgs # 查看 vg 的 free 空间 如果要查看详细的信息，用 vgdisplaylvextend -L +5G /dev/mapper/centos-var # 给该 LV 扩容 5G，如果是扩容到 5G 则把 + 去掉 resize2fs -p /dev/mapper/centos-var # 调整文件系统大小以生效，这里也可以指定扩展后的大小 resize2fs /dev/mapper/vg1-lv1 5G 但是还是推荐前者，因为如果指定的文件系统边界大于物理边界，会损坏数据# 如果是 xfs 文件系统 则为： xfs_growfs /dev/mapper/centos-vardf -h # 查看是否生效 缩减LV需求： 将 /home（挂载的 LV 为 /dev/mapper/centos-var）缩减到 4G.实现：缩减逻辑卷是比较危险的操作 ，应注意以下几点：1.不能在线缩减，需要先卸载，xfs 文件系统无法缩减；2.确保缩减后的空间大小依然能储存原有的所有数据；3.缩减之前应该强行检查文件，确保文件系统处于一致性状态。 1234567df -lh # 查看文件系统对应的 LV 这里确认到 /home 挂载点的 LV 为 /dev/mapper/centos-var，并确认其已用空间大小，保证缩减后的大小大于已用空间 umount /home # 卸载 /home df -lh # 确认卸载成功 e2fsck -f /dev/vg1/lv1 # 强制进行文件系统检测 resize2fs /home 4G # 缩减文件系统到 4G lvreduce -L 4G /dev/vg1/lv1 # 缩减 LV 到 4G mount -a # 重新挂载 移除LV直接使用 lvremove 是无法移除的，必须先卸载：12umount /lv1 # 卸载 lv1lvremove /dev/vg1/lv1 # 移除 vg1 中的 lv1 快照LV待补充 其他命令123456789df -T # 只可以查看已经挂载的分区和文件系统类型。fdisk -l # 可以显示出所有挂载和未挂载的分区，但不显示文件系统类型。parted -l # 可以查看未挂载的文件系统类型，以及哪些分区尚未格式化。lsblk -f # 也可以查看未挂载的文件系统类型。file -s /dev/sda3partprobe /dev/sda # 重新读取分区表 # fdisk 最多只能支持到15个分区，创建超过15个分区比较麻烦 cat /proc/partitions # 查看分区 参考链接https://www.cnblogs.com/gaojun/archive/2012/08/22/2650229.html马哥教育-初级-38-LV之二","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"存储","slug":"运维/Linux/存储","permalink":"https://wiki.iots.vip/categories/运维/Linux/存储/"}]},{"title":"扫盘","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/存储/扫盘/","text":"识别HBA/底层上来的LUN/硬盘：1echo \"- - -\" &gt; /sys/class/scsi_host/host0/scan # 有几个host就扫描几次 或者：1echo \"1\" &gt; /sys/class/fc_host/hostX/issue_lip # 日立存储要这样才能出来 AIX 扫盘为：1cfgmgr 查看WWN：1cat /sys/class/fc_host /hostX/port_name 查看wwid：123scsi_id -g -d /dev/sdbll /dev/disk/by-id/scsi_id -g -u -s /dev/sdb","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"存储","slug":"运维/Linux/存储","permalink":"https://wiki.iots.vip/categories/运维/Linux/存储/"}]},{"title":"文件系统","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/存储/文件系统/","text":"EXT3（1）最多只能支持 32TB 的文件系统和 2TB 的文件，实际只能容纳 2TB 的文件系统和 16GB 的文件（2）Ext3 目前只支持 32000 个子目录（3）Ext3 文件系统使用 32 位空间记录块数量和 i- 节点数量（4）当数据写入到 Ext3 文件系统中时，Ext3 的数据块分配器每次只能分配一个 4KB 的块 EXT4EXT4 是 Linux 系统下的日志文件系统，是 EXT3 文件系统的后继版本，RedHat 6 默认的文件系统（1）Ext4 的文件系统容量达到1EB，而文件容量则达到 16TB（2）理论上支持无限数量的子目录（3）Ext4 文件系统使用64位空间记录块数量和 i- 节点数量（4）Ext4 的多块分配器支持一次调用分配多个数据块 XFSRedHat 7 默认的文件系统（1）根据所记录的日志在很短的时间内迅速恢复磁盘文件内容（2）采用优化算法，日志记录对整体文件操作影响非常小（3）是一个全 64-bit 的文件系统，它可以支持上百万 T 字节的存储空间（4）能以接近裸设备 I/O 的性能存储数据","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"存储","slug":"运维/Linux/存储","permalink":"https://wiki.iots.vip/categories/运维/Linux/存储/"}]},{"title":"IP有效性检查-ipcalc","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/IP有效性检查-ipcalc/","text":"计算 IP 有效性。1234567-b：由给定的IP地址和网络掩码计算出广播地址；-h：显示给定UP地址所对应的主机名；-m：由给定的IP地址计算器网络掩码；-p：显示给定的掩码或IP地址的前缀；-n：由给定的IP地址和网络掩码计算网络地址；-s：安静模式；--help：显示帮助信息。","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"NTFS支持-ntfs-3g","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/NTFS支持-ntfs-3g/","text":"Linux 挂载 NTFS 格式 U 盘，需要安装 ntfs-3g 以支持 安装先安装 epel 库：1yum install epel-release 安装 ntfs-3g：1yum install ntfs-3g 挂载查看所有的块设备（查看所有的磁盘）：1lsblk 假设得出 U 盘设备名为 sdc ，12345mount.ntfs-3g /dev/sdc /mnt # 或 ntfsmount /dev/sdc /mnt# 或 mount -t ntfs-3g /dev/sdc /mnt 加入开机自动挂载：1234# 备份 fstab cp /etc/fstab /etc/fstab.bak# 在 fstab 追加如下内容： /dev/sdc /mnt ntfs-3g defaults 0 0","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"vim","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/vim/","text":"用法小技巧1vim filenname +20 # vi filename文件并跳转到20行","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"yum源管理-yum-config-manager","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/yum源管理-yum-config-manager/","text":"添加yum源使用 yum-config-manager 可能会报找不到该命令12345yum whatprovides yum-config-manager # 可以看到 yum-utils 可以提供 yum install -y yum-utils yum-config-manager --add-repo=file:///mnt/Package # 添加/mnt挂载的光盘本地源","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"性能监控工具:sysstat","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/性能监控工具-sysstat/","text":"安装1yum install sysstat 工具集 sysstat 提供了 Linux 性能监控的工具集，包括 sar、sadf、mpstat、iostat、pidstat 等，这些工具可以监控系统性能和使用情况。12345678910iostat - 提供CPU统计，存储I/O统计（磁盘设备，分区及网络文件系统） mpstat - 提供单个或组合CPU相关统计 pidstat - 提供Linux进程级别统计：I/O、CPU、内存等 sar - 收集、报告、保存系统活动信息：CPU、内存、磁盘、中断、网络接口、TTY、内核表等 sadc - 系统活动数据收集器，作为sar后端使用 sa1 - 收集系统活动日常数据，并二进制格式存储，它作为sadc的工具的前端，可以通过cron来调用 sa2 - 生成系统每日活动报告，同样可作为sadc的工具的前端，可以通过cron来调用 sadf - 可以以CSV、XML格式等显示sar收集的性能数据，这样非常方便的将系统数据导入到数据库中，或导入到Excel中来生成图表 nfsiostat-sysstat: 提供NFS I/O统计 cifsiostat: 提供CIFS统计 sar常用命令:12345678910111213141516171819默认监控: sar 1 1 // CPU和IOWAIT统计状态 (1) sar -b 1 1 // IO传送速率(2) sar -B 1 1 // 页交换速率(3) sar -c 1 1 // 进程创建的速率(4) sar -d 1 1 // 块设备的活跃信息(5) sar -n DEV 1 1 // 网路设备的状态信息(6) sar -n SOCK 1 1 // SOCK的使用情况(7) sar -n ALL 1 1 // 所有的网络状态信息(8) sar -P ALL 1 1 // 每颗CPU的使用状态信息和IOWAIT统计状态 (9) sar -q 1 1 // 队列的长度（等待运行的进程数）和负载的状态(10) sar -r 1 1 // 内存和swap空间使用情况(11) sar -R 1 1 // 内存的统计信息（内存页的分配和释放、系统每秒作为BUFFER使用内存页、每秒被cache到的内存页）(12) sar -u 1 1 // CPU的使用情况和IOWAIT信息（同默认监控）(13) sar -v 1 1 // inode, file and other kernel tablesd的状态信息(14) sar -w 1 1 // 每秒上下文交换的数目(15) sar -W 1 1 // SWAP交换的统计信息(监控状态同iostat 的si so)(16) sar -x 2906 1 1 // 显示指定进程(2906)的统计信息，信息包括：进程造成的错误、用户级和系统级用户CPU的占用情况、运行在哪颗CPU上(17) sar -y 1 1 // TTY设备的活动状态(18) 将输出到文件(-o)和读取记录信息(-f) 查看CPU使用情况 sar -u1sar 1 3 或 sar -u 1 3 %user 用户空间的CPU使用 %nice 改变过优先级的进程的CPU使用率 %system 内核空间的CPU使用率 %iowait CPU等待IO的百分比 %steal 虚拟机的虚拟机CPU使用的CPU %idle 空闲的CPU在以上的显示当中，主要看 %iowait 和 %idle，%iowait 过高表示存在 I/O 瓶颈，即磁盘 IO 无法满足业务需求，如果 %idle 过低表示 CPU 使用率比较严重，需要结合内存使用等情况判断 CPU 是否瓶颈。 将统计结果保存到文件 sar -o &amp; sar -f12sar -o test 1 3 #保存 sar -f test #查看 查看平均负载 sar -q1sar -q 1 3 runq-sz 运行队列的长度（等待运行的进程数，每核的 CP 不能超过 3 个） plist-sz 进程列表中的进程（processes）和线程数（threads）的数量 ldavg-1 最后 1 分钟的 CPU 平均负载，即将多核 CPU 过去一分钟的负载相加再除以核心数得出的平均值，5 分钟和 15 分钟以此类推 ldavg-5 最后 5 分钟的 CPU 平均负载 ldavg-15 最后 15 分钟的 CPU 平均负载 blocked 查看内存使用情况 sar -r1sar -r 1 3 kbmemfree 空闲的物理内存大小 kbmemused 使用中的物理内存大小 %memused 物理内存使用率 kbbuffers 内核中作为缓冲区使用的物理内存大小，kbbuffers 和 kbcached : 这两个值就是 free 命令中的 buffer 和 cache. kbcached 缓存的文件大小 kbcommit 保证当前系统正常运行所需要的最小内存，即为了确保内存不溢出而需要的最少内存（物理内存+Swap 分区） commit 这个值是 kbcommit 与内存总量（物理内存+swap 分区）的一个百分比的值 kbactive kbinact kbdirty 查看系统swap分区统计情况 sar -W1sar -W 1 3 pswpin/s 每秒从交换分区到系统的交换页面（swap page）数量 pswpott/s 每秒从系统交换到swap的交换页面（swap page）的数量 查看IO和传递速率 sar -b1sar -b 1 3 tps 磁盘每秒钟的IO总数，等于 iostat 中的 tps rtps 每秒钟从磁盘读取的 IO 总数 wtps 每秒钟从写入到磁盘的 IO 总数 bread/s 每秒钟从磁盘读取的块总数 bwrtn/s 每秒钟此写入到磁盘的块总数 查看磁盘使用情况 sar -d1sar -d DEV 磁盘设备的名称，如果不加 -p，会显示 dev253-0 类似的设备名称，因此加上 -p 显示的名称更直接 tps 每秒 I/O 的传输总数 rd_sec/s 每秒读取的扇区的总数 wr_sec/s 每秒写入的扇区的总数 avgrq-sz 平均每次次磁盘 I/O 操作的数据大小（扇区） avgqu-sz 磁盘请求队列的平均长度 await 从请求磁盘操作到系统完成处理，每次请求的平均消耗时间，包括请求队列等待时间，单位是毫秒（1 秒等于 1000 毫秒），等于寻道时间+队列时间+服务时间 svctm I/O 的服务处理时间，即不包括请求队列中的时间 %util I/O 请求占用的 CPU 百分比，值越高，说明 I/O 越慢 统计网络信息 sar -n1234567891011121314151617181920-n &#123; &lt;关键词&gt; [,...] | ALL &#125; 关键词可以是： DEV 网卡 EDEV 网卡(错误) NFS NFS 客户端 NFSD NFS 服务器 SOCK Sockets (套接字) (v4) IP IP 流 (v4) EIP IP 流 (v4) (错误) ICMP ICMP 流 (v4) EICMP ICMP 流 (v4) (错误) TCP TCP 流 (v4) ETCP TCP 流 (v4) (错误) UDP UDP 流 (v4) SOCK6 Sockets (套接字) (v6) IP6 IP 流 (v6) EIP6 IP 流 (v6) (错误) ICMP6 ICMP 流 (v6) EICMP6 ICMP 流 (v6) (错误) UDP6 UDP 流 (v6) 网络接口信息 sar -n DEV1sar -n DEV 1 1 IFACE 本地网卡接口的名称 rxpck/s 每秒钟接受的数据包 txpck/s 每秒钟发送的数据库 rxKB/S 每秒钟接受的数据包大小，单位为 KB txKB/S 每秒钟发送的数据包大小，单位为 KB rxcmp/s 每秒钟接受的压缩数据包 txcmp/s 每秒钟发送的压缩包 rxmcst/s 每秒钟接收的多播数据包 网络设备通信失败信息 sar -n EDVE1sar -n EDEV 1 1 IFACE 网卡名称 rxerr/s 每秒钟接收到的损坏的数据包 txerr/s 每秒钟发送的数据包错误数 coll/s 当发送数据包时候，每秒钟发生的冲撞（collisions）数，这个是在半双工模式下才有 rxdrop/s 当由于缓冲区满的时候，网卡设备接收端每秒钟丢掉的网络包的数目 txdrop/s 当由于缓冲区满的时候，网络设备发送端每秒钟丢掉的网络包的数目 txcarr/s 当发送数据包的时候，每秒钟载波错误发生的次数 rxfram/s 在接收数据包的时候，每秒钟发生的帧对其错误的次数 rxfifo/s 在接收数据包的时候，每秒钟缓冲区溢出的错误发生的次数 txfifo/s 在发生数据包 的时候，每秒钟缓冲区溢出的错误发生的次数 统计socket连接信息 sar -n SOCK1sar -n SOCK 1 1 totsck 当前被使用的socket总数 tcpsck 当前正在被使用的 TCP 的 socket 总数 udpsck 当前正在被使用的 UDP 的 socket 总数 rawsck 当前正在被使用于 RAW 的 skcket 总数 if-frag 当前的 IP 分片的数目 tcp-tw TCP 套接字中处于 TIME-WAIT 状态的连接数量 TCP连接的统计 sar -n TCP1sar -n TCP 1 1 active/s 新的主动连接 passive/s 新的被动连接 iseg/s 接受的段 oseg/s 输出的段","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"文件上传下载:lrzsz","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/文件上传下载-lrzsz/","text":"安装只支持 Xshell12yum install lrzsz yum groupinstall \"Dialup Networking Support\" -y 命令格式12rz # 上传 sz # 下载","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"文件传输-scp","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/文件传输-scp/","text":"SCP 命令说明Scp 在主机间复制文件。他使用 ssh(1) 作为数据传输。而且用同样认证和安全性。 scp 将在认证中请求输入密码所有的文件可能需要服务器和用户的特别描述来指明文件将被复制到/从某台服务器。两个远程登录的服务器间的文件复制是允许的。 命令格式12345678910111213141516171819202122232425262728293031323334353637383940SCP 命令语法scp [-1245BCpqrv] [-c cipher] [F ssh_config] [-I identity_file] [-l limit] [-o ssh_option] [-P port] [-S program] [[user@]host1:] file1 […] [[suer@]host2:]file2SCP 命令选项-1 强制scp 用协议1-2 强制scp 用协议2-4 强制scp用IPV4的网址-6 强制scp用IPV6的网址-B 选择批处理模式（防止输入密码）-C 允许压缩。 标注-C到ssh(1)来允许压缩-c cipher选择cipher来加密数据传输。这个选项直接传递到ssh(1)-F ssh_config设定一个可变动的用户配置给ssh.这个选项直接会被传递到ssh(1)-i identity_file选择被RSA认证读取私有密码的文件。这个选项可以直接被传递到ssh(1)-l limit限制传输带宽，也就是速度 用KByte/s的速度-o ssh_option 可以把ssh_config中的配置格式传到ssh中。这种模式对于说明没有独立的scp文件中断符的scp很有帮助。关于选项的如下。而他们的值请参看ssh_config(5)-P port 指定连接远程连接端口。注意这个选项需要写成大写的模式。因为-p已经早保留了次数和模式-S program 指定一个加密程序。这个程序必须可读所有ssh(1)的选项。-p 指定修改次数，连接次数，还有对于原文件的模式-q 把进度参数关掉-r 递归的复制整个文件夹-S program 指定一个加密程序。这个程序必须可读所有ssh(1)的选项。-V 冗余模式。 让 scp 和 ssh(1) 打印他们的排错信息， 这个在排错连接，认证，和配置中非常有用。 用法示例以tank用户登录并将服务器文件夹copy到本地1scp -r tank@192.16.1.108:/var/www/blog /home/www/blog 将本地文件copy到服务器，添填写用户，默认当前用户1scp /home/www/blog/index.php 192.16.1.108:/var/www/blog 使用指定端口从本地拷到远程服务器1scp -P 20022 -r ../vhost/ root@192.168.0.200:/home/test/ 使用证书登录，并递归的将远程目录下载到本地，同时指定了所需要的端口号。1sudo scp -r -i /Users/test/wx_Document/private.crt -P 2323 root@10.135.178.6:/data/htdocs/www/logs /Users/local","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"文件同步-rsync","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/文件同步-rsync/","text":"","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"文件搜索-locate","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/文件搜索-locate/","text":"安装1yum install mlocate 命令格式使用前先更新数据库（建立索引）：1updatedb 搜索：1locate 文件名","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"日志查看-journalctl","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/日志查看-journalctl/","text":"123456789101112131415161718192021222324# 查看多少行 journalctl -n 5 # 为帮助对问题的故障排除，可能需要根据日志条目的优先级过滤日志输出。 journalctl -p [日志级别] - debug - info - notice - warning - err - crit - alert - emerg # 查看特定时间段的日志。 journalctl --since today # 查看今天产生的日志 也可以用 --until - yesterday - today - tomorrow journalctl --since \"2020-01-01 00:00:00\" --until \"2020-01-02 06:00:00\" # 查看该时间段的日志 journalctl --since \"-1 hour\" # 查看上一小时的日志","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"端口探测-nc","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用工具的安装与使用/端口探测-nc/","text":"安装1yum install -y nmap-ncat TCP端口探测1nc -vz -w 2 10.0.1.161 9999 # -v 可视化，-z 扫描时不发送数据，-w 超时几秒 扫描多个端口1nc -vz -w 2 10.0.1.161 9998-9999 UDP端口探测1nc -vuz 10.0.1.161 9998 # u 表示 udp 端口，v 表示可视化输出，z 表示扫描时不发送数据 UDP端口探测扫描大量端口1nc -vuz 10.0.1.161 1-1000","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用工具的安装与使用","slug":"运维/Linux/常用工具的安装与使用","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用工具的安装与使用/"}]},{"title":"Samba","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/常用服务/Samba/","text":"简介Samba 实际名称为 server message block （服务消息块）。 数据共享的方法 Windows中最常用的是“网上邻居”。网上邻居使用的文件系统是CIFS(通用互联网文件系统)协议进行数据共享。 Linux中最常用的是NFS服务 Samba与NetBIOS协议 IBM开发的NetBIOS协议是为了局域网内少数计算机进行通信的协议 Samba基于NetBIOS协议开发 所以可以与Windows通信，但是只能在局域网通信(所以局域网内Windows是靠主机名来识别，而非IP地址，这也是为什么同一局域网内主机名不能重名的原因) Samba主要应用 文件共享 打印服务器(没有Windows方便，现在很少使用) Samba登录时身份验证 可以进行Windows的主机名解析（也是应用较少） 常见文件服务器的比较 服务名称 使用范围 服务器端 客户端 局限性 FTP 内网和公网 Windows和Linux Windows和Linux 无法直接在服务器修改数据 Samba 内网 Windows和Linux Windows和Linux 只能在内网使用 NFS 内网和公网 Linux Linux 只能在Linux之间使用 Samba的守护进程 smbd: 提供对服务器中文件、打印资源的共享访问 使用139 445端口 nmbd: 提供基于NetBIOS主机名称的解析 使用137 138端口 常用文件/etc/samba/smb.conf: 配置文件 /etc/samba/lmhosts: 对应NetBIOS名与主机的IP的文件，一般samba会自动搜索(只对本机有效) /etc/samba/smbpasswd: samba密码保存文件，默认不存在 /etc/samba/smbusers: 用户别名，用于适用不同的操作系统中用户名习惯、需要配置文件中”username map”选项支持 安装主服务包: samba客户端: samba-client通用工具: samba-common库: samba4-libsWindows域映射: samba-winbind域映射服务器: samba-winbind-clents 配置配置文件结构123456Global Settings - [global]: 全局设置 Share Definitions - [homes]: 用户目录共享设置 - [printers]: 打印机共享设置 - [myshare]: 自定义名称的共享目录设置 Global Settings workgroup: 所在工作组名称 server string: 服务器描述信息 log file: 日志文件位置 max log size: 日志文件的最大容量 security: 安全级别，可用值如下: share: 不需要密码可以访问（Samba4不再支持此安全级别） user: 使用系统用户 server: 由其他服务器提供认证 domain: 由域控制器提供认证 Share Definitions comment: 描述信息 path: 共享的路径 guest ok: 允许所有人访问,等同于public read only: 所有人只读 writeable: 所有人可写 write list: 拥有写权限的用户列表 browseable: 是否浏览课件 valid users: 指定可以访问的用户 配置用户名别名vi /etc/samba/smbusers原名=别名 (多个别名用空格隔开)vi /etc/samba/smb.conf 加入username map = /etc/samba/smbusers最后重启 samba 服务生效 常见的变量%v: Samba的版本号%s: 任意用户可以登录%m: client端的NetBIOS主机名%L: 服务器端的NetBIOS主机名%u: 当前登录的用户名%g: 当前登录的用户组名 Linux客户端访问Samba服务器smbclient -L ip:查看主机的共享资源smbclient //ip/file: 访问共享目录 常用命令添加Samba用户：12345678smbpasswd -a 系统用户名: 给系统用户设置一个Samba密码（该用户必须是系统用户）pdbedit -a -u 系统用户名: 同上 pdbedit -L: 查看Samba用户列表 pdbedit -x -u 系统用户名: 删除Samba用户 smbpasswd -x 系统用户名: 同上 testparm: 检测配置文件是否正确 # 挂载到本地使用 mount -t cifs -o username=用户名 //IP/目录 /挂载到的目录 报错解决Failed to add entry for user在使用 pbdedit 添加一个用户的时候，提示 Failed to add entry for user 这是因为没有加相应的系统账号，只需要添加相应的系统账号即可。123groupadd samba -g 6000 # 这里的 -g 是表示“为新组使用 GID 6000” useradd samba -u 6000 -g 6000 -s /sbin/nologin -d /dev/null # 这里 -u 表示为新用户定义用户ID，-g 指定新用户的用户组 ID，-s 指定新用户的登录 shell，-d 指定新用户的主目录","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"常用服务","slug":"运维/Linux/常用服务","permalink":"https://wiki.iots.vip/categories/运维/Linux/常用服务/"}]},{"title":"Android常用APP","date":"2019-07-31T16:00:00.000Z","path":"工具与效率/Android常用APP/","text":"播放器MX player 框架太极xpose(root) 局域网控制电脑WiFi mouse Pro 抓包工具HttpCanary 应用商店APKPure酷安 远程工具RD Client (微软远程桌面)juicessh （ssh 连接工具）","tags":[],"categories":[{"name":"工具与效率","slug":"工具与效率","permalink":"https://wiki.iots.vip/categories/工具与效率/"}]},{"title":"PS1","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/环境变量/PS1/","text":"\\u：显示当前用户账号 \\h：显示当前主机名 \\W：只显示当前路径最后一个目录 \\w：显示当前绝对路径（当前用户目录会以~代替） $PWD：显示当前全路径 \\$：显示命令行’$’或者’#’符号 #：下达的第几个命令 \\d：代表日期，格式为week day month date，例如：”MonAug1” \\t：显示时间为24小时格式，如：HH：MM：SS \\T：显示时间为12小时格式 \\A：显示时间为24小时格式：HH：MM \\v：BASH的版本信息 如export PS1=’[\\u@\\h\\w#]\\$‘","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"环境变量","slug":"运维/Linux/环境变量","permalink":"https://wiki.iots.vip/categories/运维/Linux/环境变量/"}]},{"title":"rpm","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/软件包管理/rpm/","text":"rpm(Red-Hat Package Manager)红帽系Linux发行版才有的软件包管理工具。 安装(install)12345[root@www ~]# rpm -ivh package_name选项与参数：-i ：install 的意思-v ：察看更细部的安装资讯画面-h ：以安装资讯列显示安装进度 范例一：安装 rp-pppoe-3.5-32.1.i386.rpm123[root@www ~]# rpm -ivh rp-pppoe-3.5-32.1.i386.rpmPreparing... ####################################### [100%] 1:rp-pppoe ####################################### [100%] 范例二:一口气安装两个以上的软件时：12[root@www ~]# rpm -ivh a.i386.rpm b.i386.rpm *.rpm# 后面直接接上许多的软件文件！ 范例三:直接由网络上面的某个文件安装，以网址来安装：1[root@www ~]# rpm -ivh http://website.name/path/pkgname.rpm 其他参数：12345678910111213--prefix 新路径 使用时机： 要将软件安装到其他非正规目录时。举例来说，你想要将某软件安装到 /usr/local 而非正规的 /bin, /etc 等目录， 可使用『 --prefix /usr/local 』来指定安装路径。 --nosignature 使用时机： 想要略过数码签章的检查时，可以使用这个选项。 --nodeps 使用时机：当软件出现依赖问题，而选择忽略依赖的时候危险性： 软件会有相依性的原因是因为彼此会使用到对方的机制或功能，如果强制安装而不考虑软件的属性相依， 则可能会造成该软件的无法正常使用！--replacefiles 使用时机： 如果在安装的过程当中出现了『某个文件已经被安装在你的系统上面』的资讯，又或许出现版本不合的信息 (confilcting files) 时，可以使用这个参数来直接覆盖文件。危险性： 覆盖的动作是无法复原的！所以，你必须要很清楚的知道被覆盖的文件是真的可以被覆盖喔！否则会欲哭无泪！--replacepkgs 使用时机： 重新安装某个已经安装过的软件！如果你要安装一堆 RPM 软件文件时，可以使用 rpm -ivh *.rpm ，但若某些软件已经安装过了， 此时系统会出现『某软件已安装』的资讯，导致无法继续安装。此时可使用这个选项来重复安装喔！--force 使用时机：这个参数其实就是 --replacefiles 与 --replacepkgs 的综合体！--test 使用时机： 想要测试一下该软件是否可以被安装到使用者的 Linux 环境当中，可找出是否有属性相依的问题。范例为：rpm -ivh pkgname.i386.rpm --test--justdb 使用时机： 由於 RPM 数据库破损或者是某些缘故产生错误时，可使用这个选项来升级软件在数据库内的相关资讯。--noscripts 使用时机：不想让该软件在安装过程中自行运行某些系统命令。说明： RPM 的优点除了可以将文件放置到定位之外，还可以自动运行一些前置作业的命令，例如数据库的初始化。 如果你不想要让 RPM 帮你自动运行这一类型的命令，就加上他吧！ 范例：在没有网络的前提下，你想要安装一个名为 pam-devel 的软件，你手边只有原版光盘，该如何是好？答：你可以透过挂载原版光盘来进行数据的查询与安装。请将原版光盘放入光驱，底下我们尝试将光盘挂载到 /media 当中， 并据以处理软件的下载罗：挂载光盘，使用： mount /dev/cdrom /media找出文件的实际路径：find /media -name &#39;pam-devel*&#39;测试此软件是否具有相依性： rpm -ivh pam-devel... --test直接安装： rpm -ivh pam-devel...卸载光盘： umount /dev/cdrom 更新(upgrade)12-Uvh 后面接的软件即使没有安装过，则系统将予以直接安装； 若后面接的软件有安装过旧版，则系统自动升级至新版；-Fvh 如果后面接的软件并未安装到你的 Linux 系统上，则该软件不会被安装；亦即只有已安装至你 Linux 系统内的软件会被『升级』！ 如果你想要大量的升级系统旧版本的软件时，使用 -Fvh 则是比较好的做法，因为没有安装的软件才不会被不小心安装进系统中。但是需要注意的是，如果你使用的是 -Fvh ，偏偏你的机器上尚无这一个软件，那么很抱歉，该软件并不会被安装在你的 Linux 主机上面，所以请重新以 ivh 来安装吧！ 查询(query)首先明确一下，查询的是 /var/lib/rpm 的数据库文件。1234[root@www ~]# rpm -qa &lt;==已安装软件[root@www ~]# rpm -q[licdR] 已安装的软件名称 &lt;==已安装软件[root@www ~]# rpm -qf 存在於系统上面的某个档名 &lt;==已安装软件[root@www ~]# rpm -qp[licdR] 未安装的某个文件名称 &lt;==查阅RPM文件 选项与参数：查询已安装软件的资讯：-q ：仅查询，后面接的软件名称是否有安装；-qa ：列出所有的，已经安装在本机 Linux 系统上面的所有软件名称；-qi ：列出该软件的详细资讯 (information)，包含开发商、版本与说明等；-ql ：列出该软件所有的文件与目录所在完整档名 (list)；-qc ：列出该软件的所有配置档 (找出在 /etc/ 底下的档名而已)-qd ：列出该软件的所有说明档 (找出与 man 有关的文件而已)-qR ：列出与该软件有关的依赖包文件 (Required 的意思)-qf ：由后面接的文件名称，查询某个文件是哪个安装包生成的；查询某个 RPM 文件内含有的资讯：-qp[icdlR]：注意 -qp 后面接的所有参数以上面的说明一致。查询还没安装的软件包的信息，通常与i,d,c等选项一起使用 查询软件包安装时间：1date -d @$(rpm -q --qf '%&#123;INSTALLTIME&#125;\\n' rpm包名) 卸载移除的选项很简单，就透过 -e 即可移除。不过，很常发生软件属性相依导致无法移除某些软件的问题。 找出与 pam 有关的软件名称，并尝试移除 pam 这个软件： 12345678910111213[root@www ~]# rpm -qa | grep pampam-devel-0.99.6.2-3.27.el5pam_passwdqc-1.0.2-1.2.2pam_pkcs11-0.5.3-23pam_smb-1.1.7-7.2.1pam-0.99.6.2-3.27.el5pam_ccreds-3-5pam_krb5-2.2.14-1[root@www ~]# rpm -e pamerror: Failed dependencies: &lt;==这里提到的是相依性的问题 libpam.so.0 is needed by (installed) coreutils-5.97-14.el5.i386 libpam.so.0 is needed by (installed) libuser-0.54.7-2.el5.5.i386....(以下省略).... 若仅移除 pam-devel 这个之前范例安装上的软件呢？ 123[root@www ~]# rpm -e pam-devel &lt;==不会出现任何信息！[root@www ~]# rpm -q pam-develpackage pam-devel is not installed 其他123rpm2cpio [rpm文件] | cpio -idv # rpm解包 ldd [二进制文件名] # 查看二进制程序依赖的库文件，如 ldd /bin/ls ldconfig -p # 显示本已经缓存的库文件","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"软件包管理","slug":"运维/Linux/软件包管理","permalink":"https://wiki.iots.vip/categories/运维/Linux/软件包管理/"}]},{"title":"yum","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/软件包管理/yum/","text":"常用命令123456789101112131415yum search 软件包名 # 查找软件包 yum list # 列出所有可安装的包 yum list updates # 列出所有可更新的包 yum list installed # 查看所有已安装的包 yum list extras # 列出所有已安装但不在 Yum Repository 内的软件包 yum list 软件包名 # 列出软件包的信息，如版本、官网、描述等 yum repolist # 显示已经配置的源 yum provides 软件包名 # 查找提供指定内容的软件包 yum update 软件包名 # 更新某个软件包 yum history list # 显示已经执行过的yum的历史 yum histrory undo [id] # 将历史记录里该 ID 的操作撤销 yum history redo [id] # 重复执行该 ID 的操作 yum info [包名] # 显示仓库里指定二进制程序的信息 yum-config-manager --enable [仓库名] # 启用某 repoyum-config-manager --disable [仓库名] # 关闭某 repo 卸载使用 yum install nginx 安装了 nginx，如果直接使用 yum remove nginx 进行卸载的话，会把依赖的一些包也删掉，为保险起见，使用 rpm -e --nodeps nginx 这个命令，就只删除 nginx 这个包，不会删除依赖包。 使用本地yum源第一步12# 挂载光盘到 /media 路径mount /dev/cdrom /media(挂载路径) 也可以通过修改 /etc/fstab 实现开机自动挂载，添加如下内容：1/dev/cdrom /media(挂载路径) iso9660 defaults 0 0 第二步修改 repo 配置： 1cd /etc/yum.repos.d 在repo文件中添加：12345[Local]name=LocalYumbaseurl=file:////media(挂载路径)gpgcheck=0enabled=1 第三步12345# 清理所有 yum 缓存 yum clean all# 创建元数据缓存 yum makecache","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"软件包管理","slug":"运维/Linux/软件包管理","permalink":"https://wiki.iots.vip/categories/运维/Linux/软件包管理/"}]},{"title":"关于 Alliot's Wiki","date":"2019-07-31T16:00:00.000Z","path":"index/","text":"关于本 Wiki Alliot’s Wiki 为 Alliot 做个人知识管理用，与 Alliot’s blog 相反，本 Wiki 绝大部分内容来自互联网与书籍，版权属于原作者。感谢各位大佬们的文字给我们小菜鸡在学习过程中的帮助与指引，由于部分内容记录属于工作时仓促记录，部分版权出处可能有遗漏，恳请各位朋友提出，感激不尽。 本 Wiki 基于 hexo ，主题使用 Wikitten，感谢 zthxxx 大佬的优秀的主题。Alliot 只是在其主题基础上，按照自己的要求增删了一些功能。 勘误 Wiki 中的资料虽大部分经过实操验证，但由于环境的差异，不一定完全正确，如有错误，非常感谢能指出，在每篇 Wiki 上有 Edit 按钮，您可以通过 GitHub 来提交 PR，或是直接通过邮件联系（非特殊情况都会回复）：alliot@iots.vip (点击发送邮件给我) 打赏 如果 Alliot’s Wiki 为您解决燃眉之急或是带来些许明朗，不妨打赏 Alliot 一杯香茗或是一杯咖啡。 进入 Alliot’s blog ，打开任意一篇文章末尾的打赏按钮则可打赏 Alliot。","tags":[],"categories":[]},{"title":"Chrome插件","date":"2019-07-31T16:00:00.000Z","path":"工具与效率/Chrome/","text":"快捷键http://mykeys.sinaapp.com/export.php?appid=4 插件onetabHTTPS EverywhereIDM Integration ModuleL站长工具NameBeta - Smart Domain ToolsNatashaTampermonkey广告净化器版本：2.3.5官网:www.yiclear.com 扩展管理器（Extension Manager）安装：https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco 检测nofollow链接沙拉查词-聚合词典划词翻译百度云大文件下载破解鼠标手势 crxmouse安装: https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo 书签侧边栏安装： https://chrome.google.com/webstore/detail/bookmark-sidebar/jdbnofccmhefkmjbkkdkfiicjkgofkdh 搜我听歌安装: https://chrome.google.com/webstore/detail/search-to-play-the-song/anfmgjkkbagjfdejhbjdiapgkbhpigpm 地址栏搜索切换器切换地址栏使用的搜索引擎安装: https://chrome.google.com/webstore/detail/address-bar-search-engine/jbnopeoocgbmnochaadfnhiiimfpbpmf 代理自动切换用梯子的必备，自动切换代理或直连，同一网站中的不同资源也能自动切换代理模式。安装: https://chrome.google.com/webstore/detail/padekgcemlokbadohgkifijomclgjgif选择 导入/导出 - 在线恢复：https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList.bak在情景模式选择 GFWed，将代理端口换成自己梯子的端口，如 shadowsocks 的 1080，并在左边应用设置。 阅读优化简悦——转化网页为沉浸式的阅读网页官网： http://ksria.com/simpread/ Xdown 插件下载器 Xdown 的拓展安装： https://chrome.google.com/webstore/detail/xdown/eapmjcdkdlenhkbanlgacimfibbbiinc ModHeader修改浏览器的 Header 请求头安装： https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj uBlacklist从搜索结果中移除不喜欢的内容安装： https://chrome.google.com/webstore/detail/ublacklist/pncfbmialoiaghdehhbnbhkkgmjanfhe 琼斯医生网页排版优化，强迫症福音安装： https://chrome.google.com/webstore/detail/%E7%90%BC%E6%96%AF%E5%8C%BB%E7%94%9F/lggmpimhpmplkengmfmfecohbdbooiem","tags":[],"categories":[{"name":"工具与效率","slug":"工具与效率","permalink":"https://wiki.iots.vip/categories/工具与效率/"}]},{"title":"Windows小工具","date":"2019-07-31T16:00:00.000Z","path":"工具与效率/Windows小工具/","text":"版本控制工具sourcetreeGit GUI 截图软件Snipaste下载地址: 微软应用商店 屏保Fliqlo全屏时钟官网：https://fliqlo.com/#about 剪切板软件ditto下载地址: 微软应用商店https://www.microsoft.com/store/productId/9NBLGGH3ZBJQ小技巧：按下热键（默认ctrl+ `）后，弹出ditto剪贴条目列表，此时不要放开ctrl键，可以：– 继续键入 ` 移动光标，至合适条目放开，则此条目上屏。– 键入数字，直接第N条上屏。 镜像刻录工具Rufus待办事件To-do下载地址: 微软应用商店https://www.microsoft.com/store/productId/9NBLGGH5R558 Markdown编辑器typora下载地址:http://typora.io 远程桌面协助teamviewer广告屏蔽AdGuard下载地址:https://adguard.com/zh_cn/welcome.html 视频播放器potplayer下载地址：https://potplayer.daum.net 远程工具Xshell、XFTP、Windows Terminal(需要 1903 版本以上支持，Microsoft Store 安装)Xshell 打开“选择即复制”功能： 打开xshell，选择【工具】-【选项】-【键盘和鼠标】，[ 向右按钮 ] 改为 [ 粘贴剪贴板内容 ]，下面勾选将选定的文本自动复制的剪贴板即可。 便签微软sticknote编辑器Notepad++Notepad3替换原本的记事本工具，强化版记事本下载地址：https://www.rizonesoft.com/downloads/notepad3/?ref=appinn 任务栏透明Private.BlurClear任务栏资源监控TrafficMonitor下载地址：https://github.com/zhongyang219/TrafficMonitor 搜索工具ListaryEverything （有了 listary，搜索文件基本可以不用 everything，但是 everything 还有其他例如正则、局域网搜索等功能） 下载工具IDM下载地址： MyDM下载地址：http://mydmplus.com Xdown免费无广告的 IDM / torrent 合成体下载地址：https://xdown.org/extensions/ Markdown 写作Typora 多平台支持七牛云 bucket 管理工具下载地址：https://github.com/willnewii/qiniuClient 密码管理工具Bitwarden 多平台支持下载地址：https://bitwarden.com 卸载工具GeekUninstaller（单文件）下载地址：https://geekuninstaller.com 思维导图xmind下载地址：https://www.iots.vip/post/xmind8pro-crack.html 强制删除工具用于删除用于各种问题导致的用户手动删除无效的文件 voidtools下载地址：https://www.wisecleaner.com/wise-force-deleter.html 电脑控制手机下载地址：https://github.com/Genymobile/scrcpy/releases 双屏神器UltraMon官网地址:http://www.realtimesoft.com/ultramon/ 电影管理与搜刮tinyMediaManager配合群晖 Jellyfin 使用。官网地址：https://www.tinymediamanager.org/download/ bash工具cygwin在 Windows 上运行 shell 脚本 cmdercmd 替代者官网地址：https://cmder.net/下载后丢 C 盘，进入环境变量添加 cmder=c:/cmder/Cmder.exe，在 path 添加 %cmder%，打开 cmd 运行：Cmder.exe /REGISTER ALL 以添加到鼠标右键 字符编码转换LoveString在Text段输入文字，各种编码就都能看到了。各个编码框也可以输入，用来调试乱码问题很方便。 Windows环境变量配置rapidee更加直观方便的配置 Windows 环境变量官网地址：https://www.rapidee.com/en/about教程：https://blog.csdn.net/qq_29757283/article/details/79497945 全局手势strokeplus EasyService让程序以 Windows 系统服务的方式，无窗口运行下载地址： https://github.com/pandolia/easy-service/archive/master.zip 同步工具goodsync RaiDrive映射网盘或远程 FTP/SFTP/WebDAV 服务器为本地磁盘(群晖必备)官网地址：https://www.raidrive.com/download","tags":[],"categories":[{"name":"工具与效率","slug":"工具与效率","permalink":"https://wiki.iots.vip/categories/工具与效率/"}]},{"title":"firewalld","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/防火墙/firewalld/","text":"12345678# 开放 10086 - 16666 端口段并重载配置 firewall-cmd --permanent --zone=public --add-port=10086-16666/tcp &amp;&amp; firewall-cmd --permanent --zone=public --add-port=10086-16666/udp &amp;&amp; firewall-cmd --reload # 开放 nfs 服务 firewall-cmd --permanent --add-service=nfs firewall-cmd --permanent --add-service=mountd firewall-cmd --permanent --add-service=rpc-bind firewall-cmd --reload","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"防火墙","slug":"运维/Linux/防火墙","permalink":"https://wiki.iots.vip/categories/运维/Linux/防火墙/"}]},{"title":"iptables","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/防火墙/iptables/","text":"12# 阻止特定 IP 访问本机 iptables -I INPUT -d IP地址 -j DROP(或 REJECT，但是 DROP 通常更好)","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"防火墙","slug":"运维/Linux/防火墙","permalink":"https://wiki.iots.vip/categories/运维/Linux/防火墙/"}]},{"title":"VMware-ESXi","date":"2019-07-31T16:00:00.000Z","path":"运维/虚拟化/VMware/VMware-ESXi/","text":"","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"虚拟化","slug":"运维/虚拟化","permalink":"https://wiki.iots.vip/categories/运维/虚拟化/"},{"name":"VMware","slug":"运维/虚拟化/VMware","permalink":"https://wiki.iots.vip/categories/运维/虚拟化/VMware/"}]},{"title":"VMware-Horizon-View","date":"2019-07-31T16:00:00.000Z","path":"运维/虚拟化/VMware/VMware-Horizon-View/","text":"","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"虚拟化","slug":"运维/虚拟化","permalink":"https://wiki.iots.vip/categories/运维/虚拟化/"},{"name":"VMware","slug":"运维/虚拟化/VMware","permalink":"https://wiki.iots.vip/categories/运维/虚拟化/VMware/"}]},{"title":"VMware-vCenter-Server","date":"2019-07-31T16:00:00.000Z","path":"运维/虚拟化/VMware/VMware-vCenter-Server/","text":"","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"虚拟化","slug":"运维/虚拟化","permalink":"https://wiki.iots.vip/categories/运维/虚拟化/"},{"name":"VMware","slug":"运维/虚拟化/VMware","permalink":"https://wiki.iots.vip/categories/运维/虚拟化/VMware/"}]},{"title":"CentOS 一键替换 yum 源为阿里源","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/yum源设置/CentOS一键替换yum源为阿里源/","text":"GitHub地址: https://github.com/AlliotTech/yum2aliyun执行:1wget -N --no-check-certificate https://raw.githubusercontent.com/AlliotTech/yum2aliyun/master/yum2aliyun.sh &amp;&amp; chmod +x yum2aliyun.sh &amp;&amp; ./yum2aliyun.sh 2&gt;&amp;1 | tee yum2aliyun.log","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"yum源设置","slug":"运维/Linux/CentOS7安装后的初始设置/yum源设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/yum源设置/"}]},{"title":"国内开源镜像站汇总","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/yum源设置/yum源设置/","text":"以下内容均来自网络搜集： 企业站1.搜狐：http://mirrors.sohu.com/2.网易：http://mirrors.163.com/3.阿里云：http://mirrors.aliyun.com/ 4.淘宝NPM镜像：https://npm.taobao.org/ 5.腾讯：http://android-mirror.bugly.qq.com:8080/（仅针对APP开发的软件，限流，不推荐） Google学术：http://ac.scmor.com/ 开源中国：http://mirrors.oschina.net/首都在线科技股份有限公司：http://mirrors.yun-idc.com/LUPA：http://mirror.lupaworld.com/常州贝特康姆软件技术有限公司(原cn99）：http://centos.bitcomm.cn/ 教育站1.上海交通大学：http://ftp.sjtu.edu.cn/html/resources.xml（部分移动运营商出口状况不佳，无法访问）2.华中科技大学：http://mirror.hust.edu.cn/（当前已用容量估计：4.83T）3.清华大学：http://mirrors.tuna.tsinghua.edu.cn/（当前已用容量估计：9.8T）4.北京理工大学：http://mirror.bit.edu.cn/web/5.兰州大学：http://mirror.lzu.edu.cn/6.中国科技大学：http://mirrors.ustc.edu.cn/（当前已用容量估计：21.32T）7.大连东软信息学院：http://mirrors.neusoft.edu.cn/（当前已用容量估计：2.5T）8.东北大学：http://mirror.neu.edu.cn/9.大连理工大学：http://mirror.dlut.edu.cn/10.哈尔滨工业大学：http://run.hit.edu.cn/html/（部分联通运营商出口状况不佳，无法访问）11.北京交通大学：http://mirror.bjtu.edu.cn/cn/12.天津大学：http://mirror.tju.edu.cn（无法访问，ping超时）13.中国地质大学：http://mirrors.cug.edu.cn/（当前已用容量估计：2.3T）14.浙江大学：http://mirrors.zju.edu.cn/15.厦门大学：http://mirrors.xmu.edu.cn/16.中山大学：http://mirror.sysu.edu.cn/17.重庆大学：http://mirrors.cqu.edu.cn/（当前已用容量估计：3.93T）18.北京化工大学：http://ubuntu.buct.edu.cn/（Android SDK镜像仅供校内使用，当前已用容量估计：1.72T）19.南阳理工学院：http://mirror.nyist.edu.cn/20.中国科学院：http://www.opencas.org/mirrors/21.电子科技大学：http://ubuntu.uestc.edu.cn/（无法访问，ping超时）22.电子科技大学星辰工作室：http://mirrors.stuhome.net/（当前已用容量估计：1.08T）23.西北农林科技大学：http://mirrors.nwsuaf.edu.cn/（只做CentOS镜像，当前已用容量估计：140GB） 操作系统类1.Ubuntu阿里云：http://mirrors.aliyun.com/ubuntu-releases/网易：http://mirrors.163.com/ubuntu-releases/搜狐：http://mirrors.sohu.com/ubuntu-releases/（搜狐在12年之后似乎不同步了）首都在线科技股份有限公司：http://mirrors.yun-idc.com/ubuntu-releases/ 2.centos网易：http://mirrors.163.com/centos/搜狐：http://mirrors.sohu.com/centos/阿里云：http://mirrors.aliyun.com/centos/ 服务器类1.tomcat、Apache中国互联网络信息中心：http://mirrors.cnnic.cn/apache/华中科技大学：http://mirrors.hust.edu.cn/apache/北京理工大学：http://mirror.bit.edu.cn/apache/ 2.MySQL北京理工大学：http://mirror.bit.edu.cn/mysql/Downloads/中国电信天翼云：http://mirrors.ctyun.cn/Mysql/ 3.PostgreSQL浙江大学：http://mirrors.zju.edu.cn/postgresql/ 4.MariaDB中国电信天翼云：http://mirrors.ctyun.cn/MariaDB/ 5.VideoLAN大连东软信息学院：http://mirrors.neusoft.edu.cn/videolan/中国科技大学：http://mirrors.ustc.edu.cn/videolan-ftp/ 开发工具类1.eclipse中国科技大学：http://mirrors.ustc.edu.cn/eclipse/中国科学院：http://mirrors.opencas.cn/eclipse/东北大学：http://ftp.neu.edu.cn/mirrors/eclipse/，http://mirror.neu.edu.cn/eclipse/ 2.安卓SDK中国科学院：http://mirrors.opencas.ac.cn/android/repository/南洋理工学院：http://mirror.nyist.edu.cn/android/repository/中国科学院：http://mirrors.opencas.cn/android/repository/腾讯：http://android-mirror.bugly.qq.com:8080/android/repository/（限流，不推荐）大连东软信息学院：http://mirrors.neusoft.edu.cn/android/repository/（同步效果不如中科院的镜像，不推荐） 3.Xcode腾讯：http://android-mirror.bugly.qq.com:8080/Xcode/（从7.2之后不再更新，建议直接从官网下载） 官方镜像列表状态地址CentOS：http://mirror-status.centos.org/#cnArchlinux：https://www.archlinux.org/mirrors/status/Ubuntu：https://launchpad.net/ubuntu/+cdmirrorsDebian：http://mirror.debian.org/status.htmlFedora Linux/Fedora EPEL：https://admin.fedoraproject.org/mirrormanager/mirrorsApache：http://www.apache.org/mirrors/#cnCygwin：https://www.cygwin.com/mirrors.html PyPi 镜像豆瓣：http://pypi.douban.com/山东理工大学：http://pypi.sdutlinux.org/中山大学：http://mirror.sysu.edu.cn/pypi/V2EX：http://pypi.v2ex.com/simple/ RubyGems 镜像中山大学：http://mirror.sysu.edu.cn/rubygems/山东理工大学：http://ruby.sdutlinux.org/淘宝网：http://ruby.taobao.org/ npm 镜像cnpmjs：http://cnpmjs.org/ 其他1.首都在线科技股份有限公司（英文名Capital Online Data Service）：http://mirrors.yun-idc.com/2.中国电信天翼云：http://mirrors.ctyun.cn/3.noc.im：http://mirrors.noc.im/（当前已用容量估计：3.74T）4.常州贝特康姆软件技术有限公司：http://centos.bitcomm.cn/（只做CentOS镜像，当前已用容量估计：140GB）5.公云PubYun（母公司为贝特康姆）：http://mirrors.pubyun.com/6.Linux运维派：http://mirrors.skyshe.cn/（使用阿里云服务器，界面使用浙江大学的模板，首页维护，内容可访问）7.中国互联网络信息中心：http://mirrors.cnnic.cn/（只做Apache镜像，当前已用容量估计：120GB）8.Fayea工作室：http://apache.fayea.com/（只做Apache镜像，当前已用容量估计：120GB）","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"yum源设置","slug":"运维/Linux/CentOS7安装后的初始设置/yum源设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/yum源设置/"}]},{"title":"SELinux","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/其他设置/SELinux /","text":"查看状态:12getenforce # 或者 /usr/sbin/sestatus -v 临时关闭:1getenforce 0 永久关闭:修改 /etc/selinux/config 为如下:123#SELINUX=enforcing #注释掉 #SELINUXTYPE=targeted #注释掉 SELINUX=disabled #增加 修改完后 reboot 重启生效。","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"其他设置","slug":"运维/Linux/CentOS7安装后的初始设置/其他设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/其他设置/"}]},{"title":"history显示时间","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/其他设置/history显示时间/","text":"为当前用户临时设置 HISTTIMEFORMAT 变量。这会一直生效到下次重启：1export HISTTIMEFORMAT='%F %T ' 将 HISTTIMEFORMAT 变量加到 .bashrc 或 .bash_profile 文件中，让它永久生效:12echo 'HISTTIMEFORMAT=\"%F %T \"' &gt;&gt; ~/.bashrc &amp;&amp; source~/.bashrc # 或echo 'HISTTIMEFORMAT=\"%F %T \"' &gt;&gt; ~/.bash_profile &amp;&amp; source~/.bash_profile 将 HISTTIMEFORMAT 变量加入 /etc/profile 文件中，让它对所有用户永久生效：1echo 'HISTTIMEFORMAT=\"%F %T \"' &gt;&gt; /etc/profile &amp;&amp; source/etc/profile","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"其他设置","slug":"运维/Linux/CentOS7安装后的初始设置/其他设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/其他设置/"}]},{"title":"runlevel运行级别","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/其他设置/runlevel运行级别/","text":"配置运行级别配置文件为: /etc/inittab，默认内容为：12345678910111213141516171819202122232425262728293031323334353637383940# inittab is only used by upstart for the default runlevel.## ADDING OTHER CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.## System initialization is started by /etc/init/rcS.conf## Individual runlevels are started by /etc/init/rc.conf## Ctrl-Alt-Delete is handled by /etc/init/control-alt-delete.conf## Terminal gettys are handled by /etc/init/tty.conf and /etc/init/serial.conf,# with configuration in /etc/sysconfig/init.## For information on how to write upstart event handlers, or how# upstart works, see init(5), init(8), and initctl(8).## Default runlevel. The runlevels used are:# 0 - halt (Do NOT set initdefault to this) # 0 为 系统停机状态，系统默认运行级别不能设为0，否则不能正常启动 # 1 - Single user mode# 1 为 单用户工作状态，root权限，用于系统维护，禁止远程登陆 # 2 - Multiuser, without NFS (The same as 3, if you do not have networking)# 2 为 多用户状态(没有NFS)# 3 - Full multiuser mode# 3 为 完全的多用户状态(有NFS)，登陆后进入控制台命令行模式# 4 - unused# 4 为 系统未使用，保留 # 5 - X11# 5 为 X11控制台，登陆后进入图形GUI模式# 6 - reboot (Do NOT set initdefault to this)# 6 为 系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动id:5:initdefault: 最后一行为默认运行级别，如果临时更改运行级别，可以不用改该文件，而是直接执行：123init 5 # 5 为图形界面 init 0 # 系统关机 init 6 # 系统重启 原理 在目录 /etc/rc.d/init.d 下有许多服务器脚本程序，一般称为服务(service) 在 /etc/rc.d 下有7个名为 rcN.d 的目录，对应系统的 7 个运行级别 rcN.d 目录下都是一些符号链接文件，这些链接文件都指向 init.d 目录下的 service 脚本文件，命名规则为 K+nn+ 服务名或 S+nn+ 服务名，其中 nn 为两位数字 系统会根据指定的运行级别进入对应的 rcN.d 目录，并按照文件名顺序检索目录下的链接文件，对于以 K 开头的文件，系统将终止对应的服务，对于以 S 开头的文件，系统将启动对应的服务。","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"其他设置","slug":"运维/Linux/CentOS7安装后的初始设置/其他设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/其他设置/"}]},{"title":"修改主机名","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/其他设置/修改主机名/","text":"方法一（RHEL 7）：hostnamectl123456hostnamectl # 显示主机名配置 hostnamectl set-hostname 主机名 # 修改主机名 ``` ## 修改配置文件 ``` shell vi /etc/hostname","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"其他设置","slug":"运维/Linux/CentOS7安装后的初始设置/其他设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/其他设置/"}]},{"title":"红帽订阅注册","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/其他设置/红帽订阅注册/","text":"红帽系统（RHEL）需要注册订阅后才能使用 yum 源。 注册订阅1subscription-manager register 查看可用订阅1subscription-manager list --available 自动attach1subscription-manager attach --auto","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"其他设置","slug":"运维/Linux/CentOS7安装后的初始设置/其他设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/其他设置/"}]},{"title":"IPv6配置","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/网络设置/IPv6配置/","text":"配置 IPv6(未测试)RHEL 6 系统需要在 sysctl.conf 中开启 IPv6：1vim /etc/sysctl.conf 添加一行：1net.ipv6.conf.all.disable_ipv6 = 0 # 这里是将“禁用 IPv6 选项关闭 然后编辑网卡配置文件，添加 IPv6 配置：1vim /etc/sysconfig/network-scripts/ifcfg-eth0 添加：123456789101112131415# IPv6 初始化IPV6INIT=yesIPV6FORWARDING=yes# IPv6 地址 IPV6ADDR=2607:9000:0:35::c689:6de0# 默认网关IPV6_DEFAULTGW=2607:9000:0000:0035:0000:0000:0000:0001# 自动获取地址 IPV6_AUTOCONF=no PEERDNS=no 查看 IPv6 地址：123ip -6 a# ip -4 a 为查看 IPv4 地址# ifconfig 也可以看到 curl 访问 IPv61curl \"http://\\[2400:a480:aaaa:200::159\\]:21800/api/msg-service/pull?limit=100\" 使用 ping6 来代替 ping。 RHEL 6开启IPv6来自 http://io97.com/2017/04/28/10027.html 编辑modprobe123vim /etc/modprobe.d/disable_ipv6.conf``` 将下面禁用的字段全部注释： #alias net-pf-10 off #alias ipv6 off #options ipv6 disable=1123### 编辑network ``` shell vim /etc/sysconfig/network 添加：1NETWORKING_IPV6=yes 修改sysctl添加以下允许ipv6的配置到 sysctl：1vim /etc/sysctl.conf 123net.ipv6.conf.all.disable_ipv6=0net.ipv6.conf.default.disable_ipv6=0net.ipv6.conf.lo.disable_ipv6=0 执行：1sysctl -p # 生效 sysctl 配置 重启服务器生效全部配置。 关闭 IPv6在 /etc/modprobe.d/dist.conf 结尾添加：12alias net-pf-10 offalias ipv6 off","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"网络设置","slug":"运维/Linux/CentOS7安装后的初始设置/网络设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/网络设置/"}]},{"title":"IP 地址配置","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/网络设置/ip地址配置/","text":"方法一：使用 setup 与 nmtui 命令进入图形界面配置。 方法二：修改/etc/sysconfig/network-scripts/ifcfg-eth0 文件，其中各参数的含义如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667DEVICE=name,这里name是物理设备的名字（动态分配的PPP设备应当除外，它的名字是“逻辑名”。)NAME=eth0 ，这里是定义网卡显示的名字，与 DEVICE 字段区分开。 IPADDR=addr, 这里addr是IP地址。NETMASK=mask, 这里mask是网络掩码。NETWORK=addr, 这里addr是网络地址。BROADCAST=addr, 这里addr是广播地址。GATEWAY=addr, 这里addr是网关地址。ONBOOT=answer, 这里answer取下列值之一： yes -- 该设备将在boot时被激活。 no -- 该设备不在boot时激活。 USERCTL=answer, 这里answer取下列值之一： yes --非root用户可以控制该设备。 no -- 非root用户不允许控制该设备。BOOTPROTO=proto, 这里proto取下列值之一： none或static -- 不使用boot时协议,使用静态 IP 地址。 bootp -- 使用bootp协议。 dhcp --使用dhcp协议。以下是所有PPP和SLIP文件所使用的数值：PERSIST=answer, 这里answer取下列值之一： yes --该设备将一直维持激活态，即便是modem被挂断而导致非激活态。 no -- 该设备不一直维持激活态。MODEMPORT=port, 这里port是modem端口的设备名称（如“/dev/modem”）。LINESPEED=baud, baud是modem的线速率（例如，&quot;115200&quot;）。DEFABORT=answer, 这里answer取下列值之一： yes -- 在创建或编辑该接口的脚本时插入默认的终止字符串。 no -- 在创建或编辑该接口的脚本时不要插入默认的终止字符串。以下数值适用于所有的PPP文件：DEFROUTE=answer, 这里answer取下列值之一： yes -- 将该接口设置为默认路由。 no -- 不要将该接口设置为默认路由。ESCAPECHARS=answer, 这里answer取下列值之一： yes -- 使用预定义的asyncmap。 no -- 不要使用预定义的asyncmap。（这里代表了一种简化的接口；它不让用户指定使用escape字符。然而，几乎任何情况下都可以使用一个00000000的asyncmap,而且如果需要的话，可以通过设置 PPPOPTIONS来使用任意的asyncmap.）HARDFLOWCTL=answer, 这里answer取下列值之一： yes -- 使用硬件流控制。 no -- 不使用硬件流控制。PPPOPTIONS=options,这里options是任意的选项字符串。它被放置在命令行的末尾，以覆盖前面的选项（如asyncmap）。PAPNAME=name,这里name是pppd命令行中“name $PAPNAME”的一部分。注意选项“remotename”总是指定为逻辑ppp设备名，如“ppp0”（如果先前有其它ppp设备被激活的话，这就可能是物理设备ppp1）这样做便于管理pap/chap 文件--name/passwd对与逻辑ppp设备名关联，因此它们可以被一起管理。理论上说，为逻辑PPP设备起除“ppp0”--“pppN”之外的如“worldnet”或”myISP“ 的名字是可行的。REMIP=addr, 这里addr设置为远端的ip地址（通常不加以指定）MTU=value, 这里value是MTU的数值。MRU=value, 这里value设置为MRU的值。DISCONNECTTIMEOUT=value,这里value表示当一个成功的连接被终止后要等多少秒后再进行连接。RETRYTIMEOUT=value, 这里value指企图连接失败后要等多少秒之后以进行下一次连接。 案例自用配置：12345678910111213141516171819# 网卡名 NAME=ens33# 网卡设备名 DEVICE=ens33# 开机自启 ONBOOT=yes# 静态 ip BOOTPROTO=none# ip 地址IPADDR=192.168.31.128# 子网掩码 PREFIX=24 # 网关地址 GATEWAY=192.168.31.2# DNS，这里配置的 DNS 优先级大于 /etc/resolv.confDNS1=8.8.8.8DNS2=114.114.114.114# 保证该设备网络配置不受 Network-Manager 控制 NM_CONTROLLED = no","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"网络设置","slug":"运维/Linux/CentOS7安装后的初始设置/网络设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/网络设置/"}]},{"title":"nmcli 配置网络","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/网络设置/nmcli/","text":"nmcli connection modify ifcfg-* 文件 影响 ipv4.method manual BOOTPROTO=none 配置静态IPv4地址 ipv4.method auto BOOTPROTO=dhcp 配置DHCPv4获取地址 ipv4.addresses “192.168.2.2/24 192.168.2.254” IPADDR=192.168.2.2 PREFIX=24 GATEWAY=192.168.2.254 设置IPv4地址、子网掩码以及网关 ipv4.dns 8.8.8.8 DNS1=8.8.8.8 修改/etc/resolv.conf以使用该名称服务器 ipv4.dns-search example.com DOMAIN=example.com 修改/etc/resolv.conf，以在search指令中使用这个域 ipv4.ignore-auto-dns true PEERDNS=no 忽略来自DHCP服务器的DNS服务器信息 ipv6.method manual IPV6_AUTOCONF=no 静态配置IPv6地址 ipv6.method auto IPV6_AUTOCONF=yes 使用路由器播发中的SLAAC来配置网络设置 ipv6.method dhcp IPV6_AUTOCONF=no DHCPV6C=yes 使用DHCPv6(而不使用SLAAC)来配置网络 ipv6.addresses “2001:….::a/64 2001:…::1” IPV6ADDR=2001:….::a IPV6_DEFAULTGW=2001:…::1 设置静态IPv6地址、网络前缀和默认网关。如果为连接设置了多个地址，IPv6_SECONDARIES将采用空格分隔的地址/前缀定义的双引号列表 ipv6.dns … DNS=… 修改/etc/resolv.conf 以使用该名称服务器。与IPv4完全相同 ipv6.dns-search example … 与IPv4完全相同 ipv6.ignore-auto-dns true IPV6_PEERDNS=no 忽略来自DHCP服务器的DNS服务器信息 connection.autoconnecct yes ONBOOT=yes 在系统引导时自动激活此连接 connecction.id ens3 NAME=ens3 此连接的名称 connection.interface-name ens3 DEVICE=ens3 连接与具有该名称的网络接口绑定 802-3-ethernet.mac-address …. HWADDR=… 连接与具有此MAC地址的网络接口绑定","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"网络设置","slug":"运维/Linux/CentOS7安装后的初始设置/网络设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/网络设置/"}]},{"title":"Linux配置双网卡绑定","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/网络设置/双网卡绑定/","text":"Linux 下配置多网卡绑定为一个逻辑网卡，实现本地网卡的冗余、带宽扩容与负载均衡。本文记录基本配置选项。 介绍 本文以 CentOS 为例，由于 Kernels 2.4.12 及其后面的版本提供 bonding 模块，以前的版本可以通过 patch 实现。理论上其他发行版也同样适用。查看是否支持:123[root@localhost ~]# cat /boot/config-3.10.0-957.21.3.el7.x86_64 | grep -i bondingCONFIG_BONDING=m[root@localhost ~]# 配置实例 已知本机有 ens33 与 ens37 两张网卡，需将其绑定为一张逻辑网卡 bonding。配置双网卡绑定有两种方法，一种通过修改配置文件来实现，一种通过 nmcli 来配置（CentOS 7开始支持，在这以前的版本此方法不适用）。 方法一 通过配置文件来绑定的话，需要将 Network Manager 服务关掉，避免其自动配置对我们的配置做修改。 关闭 Network Manager1systemctl stop NetworkManager.service 修改网卡配置文件1vim /etc/sysconfig/network-scripts/ifcfg-ens33 # 修改 ens33 网卡 修改其内容为：1234567TYPE=EthernetBOOTPROTO=noneONBOOT=yesDEVICE=ens33USERCTL=noMASTER=bond0SLAVE=yes 1vim /etc/sysconfig/network-scripts/ifcfg-ens37 # 修改 ens37 网卡 修改其内容为：1234567TYPE=EthernetBOOTPROTO=noneONBOOT=yesUSERCTL=noDEVICE=ens37MASTER=bond0SLAVE=yes 新建一个 bond0 网卡配置文件：1vim /etc/sysconfig/network-scripts/ifcfg-bond0 # 新建并修改 bond0 网卡配置文件 修改其内容为：123456789TYPE=EthernetBOOTPROTO=noneONBOOT=yesUSERCTL=noDEVICE=bond0IPADDR=192.168.10.10PREFIX=24DNS=192.168.10.1NM_CONTROLLED=no 网卡绑定模式介绍让 Linux 内核支持网卡绑定驱动。常见的网卡绑定驱动有三种模式— mode0、mode1 和 mode6。 mode0（balance-rr）表示负载分担 round-robin，并且是轮询的方式比如第一个包走eth0，第二个包走eth1，直到数据包发送完毕。 优点：流量提高一倍 缺点：需要接入交换机做端口聚合，否则可能无法使用mode1（active-backup）平时只有一块网卡工作，在它故障后自动替换为另外的网卡。 优点：冗余性高 缺点：链路利用率低，两块网卡只有1块在工作 mode6（balance-alb）平时两块网卡均工作，且自动备援，无须交换机设备提供辅助支持。其他modemode 2 3 4 5，总结 mode5 和 mode6 一样不需要交换机端的设置，网卡能自动聚合。mode4 需要支持 802.3ad。mode0，mode2 和 mode3 理论上需要静态聚合方式。mode3 适用于对数据正确性要求较高的场景（如银行证券） 配置网卡绑定模式下面以绑定两块网卡为例，讲解使用的情景。 比如有一台用于提供 NFS 或者 samba 服务的文件服务器，它所能提供的最大网络传输速度为 100Mbit/s，但是访问该服务器的用户数量特别多，那么它的访问压力一定很大。在生产环境中，网络的可靠性是极为重要的，而且网络的传输速度也必须得以保证。针对这样的情况，比较好的选择就是 mode6 网卡绑定驱动模式了。因为 mode6 能够让两块网卡同时一起工作，当其中一块网卡出现故障后能自动备援，且无需交换机设备支援，从而提供了可靠的网络传输保障。 1vim /etc/modprobe.d/bond.conf 配置：123alias bond0 bondingoptions bond0 miimon=100 mode=6# miimon是设置检测链路的时间，单位为毫秒。如果 miimon=100，那么系统每 100 毫秒检测一侧链路的连接状态，如果有一条线路不通就转入另一条线路。 systemctl restart network 重启网络服务即可。 方法二使用 nmcli 来实现。&lt;待更新…&gt; RHEL 7 team绑定提起关闭 NetworkManager：12systemctl stop NetworkManager systemctl disable NetworkManager 12345678910111213141516171819202122232425### ifcfg-eth1 NAME=eth1DEVICE=&quot;eth1&quot;DEVICETYPE=&quot;TeamPort&quot;ONBOOT=&quot;yes&quot;TEAM_MASTER=&quot;team0&quot;### ifcfg-eth2 NAME=eth2DEVICE=&quot;eth2&quot;DEVICETYPE=&quot;TeamPort&quot;ONBOOT=&quot;yes&quot;TEAM_MASTER=&quot;team0&quot;### ifcfg-team0 NAME=team_test0DEVICE=&quot;team0&quot;DEVICETYPE=&quot;Team&quot;ONBOOT=&quot;yes&quot;BOOTPROTO=noneIPADDR=10.150.20.76NETMASK=255.255.255.224GATEWAY=10.150.20.94TEAM_CONFIG=&apos;&#123;&quot;runner&quot;: &#123;&quot;name&quot;: &quot;activebackup&quot;&#125;&#125;&apos; 参考链接马哥教育51CTO-beyondlee2011","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"网络设置","slug":"运维/Linux/CentOS7安装后的初始设置/网络设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/网络设置/"}]},{"title":"网络常用命令","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/网络设置/网络常用命令/","text":"双网卡绑定用到的关闭ens33网卡123ip link set dev ens33 down # 关闭ens33网卡#或者 ifconfig ens33 down 查看网卡UUID：12nmcli con show # 或nmcli con list 查看网卡mac地址：12nmcli dev show # 或nmcli dev list 查看绑定状态:1cat /proc/net/bonding/bond0 查看所有网卡ip:1ip addr 定位到设备名对应的网口123lspci |grep -i eth* # 查找 PCI 网卡设备 find /sys -name ethethtool -p &lt;设备名&gt; # 对应设备的网口会闪定位灯","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"网络设置","slug":"运维/Linux/CentOS7安装后的初始设置/网络设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/网络设置/"}]},{"title":"配置禁止ping","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/CentOS7安装后的初始设置/网络设置/配置禁止ping/","text":"1echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 可以将这一行加到 /etc/rc.d/rc.local 文件中去，这样系统重启动后会自动执行，恢复系统的Ping响应：1echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"CentOS7安装后的初始设置","slug":"运维/Linux/CentOS7安装后的初始设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/"},{"name":"网络设置","slug":"运维/Linux/CentOS7安装后的初始设置/网络设置","permalink":"https://wiki.iots.vip/categories/运维/Linux/CentOS7安装后的初始设置/网络设置/"}]},{"title":"常用代码片段","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/代码片段/常用片段/","text":"输出文本颜色1echo -e \"\\033[32m这里是绿色文本\\033[0m\" 可以先预定义 然后方便调用：12345green='\\e[1;32m' # greenred='\\e[1;31m' # redblue='\\e[1;34m' # blue nc='\\e[0m' # normal echo -e \"$&#123;red&#125;红色$&#123;nc&#125;\" #这里注意echo后面需要用双引号，单引号无效 给文件加上日期时间戳1history &gt; \"history-`date +%F`.txt # 输出历史记录到 history-日期.txt 文件中。 MySQL数据库备份命令1mysqldump -uusername -ppasswd -d sqlname &gt; $BAKDIR/sqlname.sql 输出具体时间1TIME=$(date +'%Y-%m-%d %H:%M:%S') 输出的格式为： 2019-07-29 17:14:20 操作系统类型判断12345678910111213# 判断是不是 Linux OS_TYPE=$(uname -s)# 判断是不是 RedHat 系case $&#123;OS_TYPE&#125; in \"Linux\") cat /proc/version|grep -E 'redhat.com|centos.org' [ $? -eq 1 ] &amp;&amp; exit 1 ;; *) echo 'The script cannot be used on the system.' exit 1esac CPU监控相关123cpu_num=`grep 'model name' /proc/cpuinfo |wc -l` # 统计cpu核数 load_average=`uptime | awk -F \":\" '&#123;print $NF&#125;'|awk -F \",\" '&#123;print $3&#125;'` # load average 取值key=`bc &lt;&lt;&lt; $&#123;load_average&#125;*100/$&#123;cpu_num&#125; | awk -F'.' '&#123;print $1&#125;'` # 计算当前 CPU 负载 内存监控相关12free -h|grep Mem|awk '&#123;print $2&#125;' # 总内存 free -h|grep Mem|awk '&#123;print $3&#125;' # 已用内存 磁盘监控相关12df -Th | grep -w \"/\" | awk '&#123;print $6&#125;' | awk -F'%' '&#123;print $1&#125;' # 获取根目录已用百分比并去掉% df -i | grep -w \"/\" | awk '&#123;print $5&#125;' | awk -F'%' '&#123;print $1&#125;' # 获取根目录 I node 已用百分比并去掉% 进程监控相关12ps auxf |sed '1d'|sort -nr -k 3 |head -5 # 耗CPU最多的进程 ps auxf |sed '1d'|sort -nr -k 4 |head -5 # 耗内存最多的进程 开机启动的服务1systemctl list-unit-files | grep enabled 取本机公网IP1curl ip.sb 取整1234567891011var=4.57法一：echo $&#123;var%.*&#125; #这个是直接去除小数点及后面所有内容，只用于bash法二：echo $var | awk -F. '&#123;print $1&#125;' #以小数点为分隔符取第一个字段法三：echo $var | awk '&#123;print int($0)&#125;' #awk中可直接使用C函数取整法四：echo \"scale=0;$var/1\"|bc -l #用bc计算法五：printf \"%.0f\\n\" $var #这个与上面不同，是四舍五入的 判断是否为root用户1[[ $EUID -ne 0 ]] &amp;&amp; echo -e \"$&#123;red&#125;Error:$&#123;plain&#125; This script must be run as root!\" &amp;&amp; exit 1 # 判断是否为root 判断是否为 OpenVZ 架构1[[ -d \"/proc/vz\" ]] &amp;&amp; echo -e \"$&#123;red&#125;Error:$&#123;plain&#125; Your VPS is based on OpenVZ, which is not supported.\" &amp;&amp; exit 1 判断命令是否安装1command -v curl &gt;/dev/null 2&gt;&amp;1 || yum install curl -y || apt install curl -y 使用ssh密码登录到指定机器执行命令1234# 需要安装 sshpass 工具 yum install -y sshpass sshpass -p 密码 ssh -p 端口 -o StrictHostKeyChecking=no -l 用户名 IP \"ifconfig\" # -o StrictHostKeyChecking=no 作用为屏蔽首次登录保存指纹的提示 逐行读取文件文本123456789101112131415161718192021# 以列表格式输出 df -h 的结果 echo Filesystem,Size,Used,Avail,Used%,Mounteddf -kP &gt; df.outcat df.out | sed '1d'|while read LINEdo Filesystem=`echo $LINE|awk '&#123;print $1&#125;'` Size=`echo $LINE|awk '&#123;print $2&#125;'` Used=`echo $LINE|awk '&#123;print $3&#125;'` Avail=`echo $LINE|awk '&#123;print $4&#125;'` UsedP=`echo $LINE|awk '&#123;print $5&#125;'` Mounted=`echo $LINE|awk '&#123;print $6&#125;'` echo $Filesystem,$Size,$Used,$Avail,$UsedP,$Mounteddonerm -rf df.out&#125; 获取本机IP1ifconfig -a|grep 'inet '|grep 'cast'|sed 's/inet//'|sed 's/addr://'|awk '&#123;print $1&#125;'|head -n 1 获取操作系统版本12[ -f /etc/issue ] &amp;&amp; METRIC_VALUE=$(cat /etc/issue|head -n 1)[ -f /etc/system-release ] &amp;&amp; METRIC_VALUE=$(cat /etc/system-release|head -n 1)","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"代码片段","slug":"运维/Linux/shell/代码片段","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/代码片段/"}]},{"title":"awk","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/awk/","text":"","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]},{"title":"cut","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/cut/","text":"","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]},{"title":"find","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/find/","text":"简介find 主要用于文件、目录的查找。 命令格式1find 路径 -命令参数 [-输出形式] 命令参数：123456789101112131415161718192021222324252627282930-name 按照文件名查找文件。 -perm 按照文件权限来查找文件。 -prune 使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用了- depth选项，那么-prune选项将被find命令忽略。 -user 按照文件属主来查找文件。 -group 按照文件所属的组来查找文件。 -mtime -n +n 按照文件的更改时间来查找文件， -n表示文件更改时间距现在n天以内，+n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime选项，但它们都和-mtime选项相似，所以我们在这里只介绍-mtime选项。 -nogroup 查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。 -nouser 查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。 -newer file1 ! file2 查找更改时间比文件file1新但比文件file2旧的文件。 -type 查找某一类型的文件，诸如： b - 块设备文件。 d - 目录。 c - 字符设备文件。 p - 管道文件。 l - 符号链接文件。 f - 普通文件。 s - socket文件-size n[cwbkMG] : 文件大小为 n 个由后缀决定的数据块。其中后缀为： b: 代表 512 位元组的区块（如果用户没有指定后缀，则默认为 b） c: 表示字节数 k: 表示 kilo bytes （1024字节） w: 字 （2字节） M:兆字节（1048576字节） G: 千兆字节 （1073741824字节）-depth 在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。 -maxdepth 查找最大目录层数 如 1，即只查找一层目录。 -fstype 查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件 /etc/fstab 中找到，该配置文件中包含了本系统中有关文件系统的信息。 -mount 在查找文件时不跨越文件系统mount点。 -follow 如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。 -cpio 对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]},{"title":"grep","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/grep/","text":"grep1234567-v 显示不包含匹配文本的所有行。 如 ps -ef |grep nginx|grep -v grep 这样就只会显示 nginx 相关的进程 而不会显示 grep --color=auto nginx 进程。 -V 显示 grep 的版本信息 -i 忽略大小写 -n 输出行号 -c 计算找到的字符串的个数 -a 将 binary 文件以 text 文件的方式搜寻数据 -w 强制全词匹配","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]},{"title":"sed","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/sed/","text":"字符串替换1. sed 替换的基本语法为:12sed 's/原字符串/替换字符串/' # 单引号里面,s表示替换,三根斜线中间是替换的样式,特殊字符需要使用反斜线”\\”进行转义。 2. 单引号 ” ‘’ ” 是没有办法用反斜线 ”\\” 转义的,这时候只要把命令中的单引号改为双引号就行了,格式如下：12# 要处理的字符包含单引号sed \"s/原字符串包含'/替换字符串包含'/\" 3. 命令中的三根斜线分隔符可以换成别的符号,有时候替换目录字符串的时候有较多斜线，这个时候换成其它的分割符是较为方便,只需要紧跟 s 定义即可。 12# 将分隔符换成问号”?”:sed 's?原字符串?替换字符串?' 4. 可以在末尾加 g 替换每一个匹配的关键字,否则只替换每行的第一个,例如:12# 替换所有匹配关键字sed 's/原字符串/替换字符串/g' 5. 一些特殊字符的使用123456789# ”^”表示行首 # ”$”符号如果在引号中表示行尾，但是在引号外却表示末行(最后一行) # 注意这里的 \" &amp; \" 符号，如果没有 “&amp;”，就会直接将匹配到的字符串替换掉sed 's/^/添加的头部&amp;/g' #在所有行首添加sed 's/$/&amp;添加的尾部/g' #在所有行末添加sed '2s/原字符串/替换字符串/g' #替换第2行sed '$s/原字符串/替换字符串/g' #替换最后一行sed '2,5s/原字符串/替换字符串/g' #替换2到5行sed '2,$s/原字符串/替换字符串/g' #替换2到最后一行 6. 批量替换字符串12sed -i \"s/查找字段/替换字段/g\" `grep 查找字段 -rl 路径`sed -i \"s/oldstring/newstring/g\" `grep oldstring -rl yourdir 7. sed 处理过的输出是直接输出到屏幕上的,使用参数 “i” 直接在文件中替换。12# 替换文件中的所有匹配项sed -i 's/原字符串/替换字符串/g' filename 8. 多个替换可以在同一条命令中执行,用分号 ”;” 分隔，其格式为: 12# 同时执行两个替换规则sed 's/^/添加的头部&amp;/g；s/$/&amp;添加的尾部/g' 以上内容来自 Amei6536","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]},{"title":"tee","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/tee/","text":"tee 读取标准输入的数据，并将其内容输出成文件，把 标准输入 的 数据 复制到 每一个文件 FILE， 同时，送往标准输出。1234567-a, --append 追加到 给出的 文件, 而不是 覆盖-i, --ignore-interrupts 忽略 中断信号--help 显示 帮助信息, 然后 结束--version 显示 版本信息, 然后 结束 举例：123ls | tee test # 这样，会像平时一样执行 ls 命令并将当前目录的文件名输出到标准输出。另外由于进行了 tee 命令，所以会生成一个 test 文件，这个 test 文件的内容和标准输出的内容一样。echo \"aa\" | tee 1.txt 2.txt # 这是与 &gt; 重定向的区别之一，tee 能够追加到多个文件 而重定向只能一个。 echo \"aa\" | tee 1.txt # 执行此命令，屏幕会输出 aa 字符串，而执行 echo \"aa\" &gt; 1.txt 屏幕不会输出 aa 字符串而仅仅是输出到了 1.txt 中。","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]},{"title":"uniq与sort","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/uniq与sort/","text":"","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]},{"title":"基本语法","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/基本语法/","text":"shebang推荐:12#!/bin/env bash #!/bin/bash 内置变量12345678$$ 脚本运行的当前进程ID号$0 当前程序的名称 $n 当前程序的第N个参数 $* 当前程序的所有参数（不包括程序本身） $# 当前程序参数的个数（不包括程序本身） $? 命令或程序执行完后的状态，一般返回0则表示执行成功。 exit 0 则返回0 exit 1则返回1 $UID 当前用户的ID $PWD 当前所在的目录 变量赋值12SIZE=\"$(df -kP | sed '1d' | grep -E \"2[0-9]%|9[0-9]%|100%\" | awk '&#123;print $NF&#125;' | xargs)\" # 这里注意\"后面不要加空格 条件判断语句if语句用法123456# _代表空格if_[_条件_];_then echo 1else echo 2fi 逻辑运算符解析：1234567891011-f 判断文件是否存在 eg: if [-f filename] -d 判断目录是否存在 eg: if [-d dirname]-eq 等于，用于整型比较 -ne 不等于 -lt 小于 -gt 大于 -le 小于等于 -ge 大于等于 -a 双方都成立（and） 逻辑表达式 -o or-z 空字符串 例 1：123456# 加! 表示 如果目录不存在if [! -d /alliot (这里记得有个空格)]; then mkdir alliot else echo &quot;the alliot directory exist&quot; fi 例 2:12345# 判断执行用户ID是不是root if [ $UID -ne 0 ];then echo \"当前用户不是root\" exit fi 例 3:123456# 判断当前脚本执行是否成功 if [ $? -eq 0 ];then echo -e \"\\033[32m执行成功\\033[0m\"else echo -e \"failure\"fi 调用其他脚本文件中的函数调用 ./1.sh 中的函数,需要先用 source ./a.sh如 当前目录下有 1.sh 脚本如下： 123456cat 1.sh #!/bin/env bash function sayHelloWorld()&#123;echo \"hello world!\"&#125; 当我们想在 main.sh 中调用 sayHelloWorld 函数，则需要在开头使用： source ./1.sh 才能在 main.sh 中使用 sayHelloWorld()","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]},{"title":"自用语法规范","date":"2019-07-31T16:00:00.000Z","path":"运维/Linux/shell/基本用法/自用语法规范/","text":"来自于 GitHub chen-shang/BaseShell 有所删减。 函数定义规范推荐：使用关键字 function 显示定义的函数为 public 的函数,可以供 外部脚本以 sh 脚本 函数 函数入参 的形式调用,可以认为成Java当中的public的方法。 推荐未使用关键字 function 显示定义的函数为 private 的函数, 仅供本脚本内部调用,可以认为成Java中的私有方法,注意这种private是人为规定的,并不是Shell的语法,不推荐以 sh 脚本 函数 函数入参 的形式调用,注意是不推荐而不是不能。 说明:这样做的目的就在于使脚本具有一定的封装性,看到 function 修饰的就知道这个函数能被外部调用, 没有被修饰的函数就仅供内部调用。你就知道如果你修改的函数的影响范围. 如果是 被function 修饰的函数,修改后可能影响到外部调用他的脚本, 而修改未被function修饰的函数的时候,仅仅影响本文件中其他函数。 注释的写法规范12345678910# 主函数 []&lt;-() &lt;-------函数注释这样写function main()&#123; local var=\"Hello World!!!\" echo $&#123;var&#125;&#125;# info级别的日志 []&lt;-(msg:String) &lt;-------带入参的函数注释log_info()&#123; echo \"[$(date +'%Y-%m-%dT%H:%M:%S%z')][$$]: [info] $*\" &gt;&amp;2&#125; main函数的函数类型是 []&lt;-() , &lt;- 左侧表的是函数的返回值类型 用[]包裹, 右侧是函数的参数类型 用()包裹,多个参数用 ‘,’ 分隔,参数的描述是从 Scala 语言中偷过来, 先是参数名称 然后是参数类型 中间用:分隔对于main函数的注释来说, # 顶格写,后面紧跟一个空格,其实这样写是遵循的markdown的语法, 后面再跟一个空格,然后是 []&lt;-(),代表这个函数没有入参也没有返回值,这个函数的目的就是执行这个这个函数中的命令,但我不关心这个函数的返回值。也就是利用函数的副作用来完成我们想要的操作。对于log_info 也是一样 不过 最后的函数类型是 []&lt;-(msg:String) 代表入参是一个string类型的信息,然后也没有返回值。 关于函数的返回值,我理解的函数的返回值有两种形式,一种是显示的return一种是隐式的echo","tags":[],"categories":[{"name":"运维","slug":"运维","permalink":"https://wiki.iots.vip/categories/运维/"},{"name":"Linux","slug":"运维/Linux","permalink":"https://wiki.iots.vip/categories/运维/Linux/"},{"name":"shell","slug":"运维/Linux/shell","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/"},{"name":"基本用法","slug":"运维/Linux/shell/基本用法","permalink":"https://wiki.iots.vip/categories/运维/Linux/shell/基本用法/"}]}]}